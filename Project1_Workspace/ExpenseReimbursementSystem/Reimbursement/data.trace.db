2018-11-25 13:47:37 jdbc[3]: exception
org.h2.jdbc.JdbcSQLException: Syntax error in SQL statement "CREATE OR REPLACE TRIGGER ERS_REIMB_ID_NULL_TRIG BEFORE INSERT ON ERS_REIMBURSEMENT FOR EACH ROW BEGIN[*]         IF :NEW.REIMB_ID IS NULL THEN                 SELECT ERS_REIMB_ID_SEQ.NEXTVAL INTO :NEW.REIMB_ID FROM DUAL;         END IF;         IF :NEW.REIMB_STATUS_ID IS NULL THEN              SELECT 101 INTO :NEW.REIMB_STATUS_ID FROM DUAL;         END IF; END; /  CREATE OR REPLACE TRIGGER ERS_USERS_ID_NULL_TRIG BEFORE INSERT ON ERS_USERS FOR EACH ROW BEGIN         IF :NEW.ERS_USERS_ID IS NULL THEN                 SELECT ERS_USERS_ID_SEQ.NEXTVAL INTO :NEW.ERS_USERS_ID FROM DUAL;         END IF;                   SELECT GET_CUSTOMER_HASH(:NEW.ERS_USERNAME,:NEW.ERS_PASSWORD) INTO :NEW.ERS_PASSWORD FROM DUAL; END; /  CREATE OR REPLACE PROCEDURE INSERT_ERS_USERS_ID_NULL(ERS_USERNAME IN VARCHAR2, ERS_PASSWORD VARCHAR2, USER_FIRST_NAME IN VARCHAR, USER_LAST_NAME IN VARCHAR2, USER_EMAIL IN VARCHAR, USER_ROLE_ID IN NUMBER) IS BEGIN     INSERT INTO ERS_USERS VALUES(ERS_USERS_ID_SEQ.NEXTVAL, ERS_USERNAME, ERS_PASSWORD, USER_FIRST_NAME, USER_LAST_NAME, USER_EMAIL, USER_ROLE_ID);     COMMIT; END;     /   CREATE OR REPLACE TRIGGER ERS_REIMB_STATUS_ID_NULL_TRIG BEFORE INSERT ON ERS_REIMBURSEMENT_STATUS FOR EACH ROW BEGIN         IF :NEW.REIMB_STATUS_ID IS NULL THEN                 SELECT ERS_REIMB_STATUS_ID_SEQ.NEXTVAL INTO :NEW.REIMB_STATUS_ID FROM DUAL;         END IF; END; /   CREATE OR REPLACE PROCEDURE INSERT_ERS_REIMB_S_ID_NULL(REIMB_STATUS IN VARCHAR2) IS BEGIN     INSERT INTO ERS_REIMBURSEMENT_STATUS VALUES(ERS_REIMB_STATUS_ID_SEQ.NEXTVAL, REIMB_STATUS);     COMMIT; END; /   CREATE OR REPLACE TRIGGER ERS_REIMB_TYPE_ID_NULL_TRIG BEFORE INSERT ON ERS_REIMBURSEMENT_TYPE FOR EACH ROW BEGIN         IF :NEW.REIMB_TYPE_ID IS NULL THEN                 SELECT ERS_REIMB_TYPE_ID_SEQ.NEXTVAL INTO :NEW.REIMB_TYPE_ID FROM DUAL;         END IF; END; /  CREATE OR REPLACE PROCEDURE INSERT_ERS_REIMB_ID_NULL(REIMB_AMOUNT IN NUMBER, REIMB_SUBMITTED TIMESTAMP,  REIMB_DESCRIPTION IN VARCHAR, REIMB_RECEIPT IN BLOB, REIMB_AUTHOR IN VARCHAR2, REIMB_TYPEIN IN VARCHAR2) IS     REIMB_AUTHOR_ID NUMBER;     REIMB_STATUS_ID NUMBER;     REIMB_TYPEID NUMBER; BEGIN     SELECT ERS_USERS_ID INTO  REIMB_AUTHOR_ID FROM ERS_USERS WHERE ERS_USERNAME = REIMB_AUTHOR;      SELECT REIMB_TYPE_ID INTO REIMB_TYPEID FROM ERS_REIMBURSEMENT_TYPE WHERE REIMB_TYPE = REIMB_TYPEIN;      INSERT INTO ERS_REIMBURSEMENT(REIMB_ID, REIMB_AMOUNT, REIMB_SUBMITTED, REIMB_DESCRIPTION, REIMB_RECEIPT, REIMB_AUTHOR, REIMB_STATUS_ID, REIMB_TYPE_ID) VALUES(ERS_REIMB_ID_SEQ.NEXTVAL, REIMB_AMOUNT, REIMB_SUBMITTED, REIMB_DESCRIPTION, REIMB_RECEIPT, REIMB_AUTHOR_ID, REIMB_STATUS_ID, REIMB_TYPEID);          COMMIT; END;     /  CREATE OR REPLACE PROCEDURE INSERT_ERS_REIMB_T_ID_NULL(REIMB_TYPE IN VARCHAR2) IS BEGIN     INSERT INTO ERS_REIMBURSEMENT_TYPE VALUES(ERS_REIMB_TYPE_ID_SEQ.NEXTVAL, REIMB_TYPE);     COMMIT; END; /  COMMIT;  CREATE OR REPLACE TRIGGER ERS_USER_ROLE_ID_NULL_TRIG BEFORE INSERT ON ERS_USER_ROLES FOR EACH ROW BEGIN         IF :NEW.ERS_USER_ROLE_ID IS NULL THEN                 SELECT ERS_USER_ROLE_ID_SEQ.NEXTVAL INTO :NEW.ERS_USER_ROLE_ID FROM DUAL;         END IF; END; /  CREATE OR REPLACE PROCEDURE INSERT_ERS_USER_ROLES_ID_NULL(USER_ROLE IN VARCHAR2) IS BEGIN     INSERT INTO ERS_USER_ROLES VALUES(ERS_USER_ROLE_ID_SEQ.NEXTVAL, USER_ROLE);     COMMIT; END; /INSERT INTO ERS_REIMBURSEMENT_TYPE (REIMB_TYPE) VALUES('Lodging'); INSERT INTO ERS_REIMBURSEMENT_TYPE (REIMB_TYPE) VALUES('Travel'); INSERT INTO ERS_REIMBURSEMENT_TYPE (REIMB_TYPE) VALUES('Food'); INSERT INTO ERS_REIMBURSEMENT_TYPE (REIMB_TYPE) VALUES('Other');INSERT INTO ERS_REIMBURSEMENT_STATUS (REIMB_STATUS) VALUES('Pending'); INSERT INTO ERS_REIMBURSEMENT_STATUS (REIMB_STATUS) VALUES('Approved'); INSERT INTO ERS_REIMBURSEMENT_STATUS (REIMB_STATUS) VALUES('Denied');INSERT INTO ERS_USER_ROLES (USER_ROLE) VALUES('Employee'); INSERT INTO ERS_USER_ROLES (USER_ROLE) VALUES('Admin');INSERT INTO ERS_USERS (ERS_USERNAME,ERS_PASSWORD,USER_FIRST_NAME,USER_LAST_NAME,USER_EMAIL,USER_ROLE_ID) VALUES('coltossoff','12345','Colt','Ossoff','coltossoff@gmail.com',301); INSERT INTO ERS_USERS (ERS_USERNAME,ERS_PASSWORD,USER_FIRST_NAME,USER_LAST_NAME,USER_EMAIL,USER_ROLE_ID) VALUES('seandoyle','12345','Sean','Doyle','SCDoyle316@gmail.com',301); INSERT INTO ERS_USERS (ERS_USERNAME,ERS_PASSWORD,USER_FIRST_NAME,USER_LAST_NAME,USER_EMAIL,USER_ROLE_ID) VALUES('phillippride','12345','Phillip','Pride','phillipjpride@gmail.com',301); INSERT INTO ERS_USERS (ERS_USERNAME,ERS_PASSWORD,USER_FIRST_NAME,USER_LAST_NAME,USER_EMAIL,USER_ROLE_ID) VALUES('kristenkavanagh','12345','Kristen','Kavanagh','Kristen.kavanagh.wright@gmail.com',301); INSERT INTO ERS_USERS (ERS_USERNAME,ERS_PASSWORD,USER_FIRST_NAME,USER_LAST_NAME,USER_EMAIL,USER_ROLE_ID) VALUES('alexandriawise','12345','Alexandria','Wise','alexandriarwise@gmail.com',301); INSERT INTO ERS_USERS (ERS_USERNAME,ERS_PASSWORD,USER_FIRST_NAME,USER_LAST_NAME,USER_EMAIL,USER_ROLE_ID) VALUES('michaeljung','12345','Michael','Jung','michael.jungrevature@gmail.com',301); INSERT INTO ERS_USERS (ERS_USERNAME,ERS_PASSWORD,USER_FIRST_NAME,USER_LAST_NAME,USER_EMAIL,USER_ROLE_ID) VALUES('bronwenhughes','12345','Bronwen','Hughes','bronwen@hughesnet.org',301); INSERT INTO ERS_USERS (ERS_USERNAME,ERS_PASSWORD,USER_FIRST_NAME,USER_LAST_NAME,USER_EMAIL,USER_ROLE_ID) VALUES('ryanwilliams','12345','Ryan','Williams','rrwilliams1600@gmail.com',301); INSERT INTO ERS_USERS (ERS_USERNAME,ERS_PASSWORD,USER_FIRST_NAME,USER_LAST_NAME,USER_EMAIL,USER_ROLE_ID) VALUES('vanessafountain','12345','Vanessa','Fountain','vanessa.s.fountain@gmail.com',301); INSERT INTO ERS_USERS (ERS_USERNAME,ERS_PASSWORD,USER_FIRST_NAME,USER_LAST_NAME,USER_EMAIL,USER_ROLE_ID) VALUES('louispipkin','12345','Louis','Pipkin','ldpipkin@gmail.com',301); INSERT INTO ERS_USERS (ERS_USERNAME,ERS_PASSWORD,USER_FIRST_NAME,USER_LAST_NAME,USER_EMAIL,USER_ROLE_ID) VALUES('joshuajibilian','12345','Joshua','Jibilian','jwjibilian@gmail.com',301); INSERT INTO ERS_USERS (ERS_USERNAME,ERS_PASSWORD,USER_FIRST_NAME,USER_LAST_NAME,USER_EMAIL,USER_ROLE_ID) VALUES('johnjosephsavath','12345','John','Savath','Johnsavath@gmail.com',301); INSERT INTO ERS_USERS (ERS_USERNAME,ERS_PASSWORD,USER_FIRST_NAME,USER_LAST_NAME,USER_EMAIL,USER_ROLE_ID) VALUES('michaelgrammens','12345','Michael','Grammens','MLGrammens@gmail.com',301); INSERT INTO ERS_USERS (ERS_USERNAME,ERS_PASSWORD,USER_FIRST_NAME,USER_LAST_NAME,USER_EMAIL,USER_ROLE_ID) VALUES('clementdikoko','12345','Clement','Dikoko','clementdikoko94@gmail.com',301); INSERT INTO ERS_USERS (ERS_USERNAME,ERS_PASSWORD,USER_FIRST_NAME,USER_LAST_NAME,USER_EMAIL,USER_ROLE_ID) VALUES('trevinchester','help','Trevin','Chester','Trevin.Chester@revature.com',302);CREATE OR REPLACE FUNCTION GET_CUSTOMER_HASH(USERNAME VARCHAR2, PWD VARCHAR2) RETURN VARCHAR2 IS EXTRA VARCHAR2(10) := 'SALT'; BEGIN   RETURN TO_CHAR(DBMS_OBFUSCATION_TOOLKIT.MD5(   INPUT => UTL_I18N.STRING_TO_RAW(DATA => USERNAME || PWD || EXTRA))); END; /  CREATE OR REPLACE TRIGGER USER_INSERT BEFORE INSERT ON ERS_USERS FOR EACH ROW BEGIN                                 IF :NEW.C_ID IS NULL THEN     SELECT CUSTOMER_SEQ.NEXTVAL INTO :NEW.C_ID FROM DUAL;   END IF;                                            SELECT GET_CUSTOMER_HASH(:NEW.C_USERNAME,:NEW.C_PASSWORD) INTO :NEW.C_PASSWORD FROM DUAL; END; /CREATE OR REPLACE FUNCTION CHECK_CRENDENTIALS(USERNAME VARCHAR2, PWD VARCHAR2) RETURN VARCHAR2 IS     HASH VARCHAR2(250); BEGIN     HASH:= GET_CUSTOMER_HASH(USERNAME, PWD);     RETURN HASH; END; /CREATE OR REPLACE PROCEDURE UPDATE_REIMB_STATUS(ID IN NUMBER, STATUS IN VARCHAR2, RESOLVER IN VARCHAR2) IS    T_REIMB_STATUS_ID NUMBER;    T_RESOLVER_ID NUMBER;    T_RESOLVED TIMESTAMP; BEGIN     SELECT ERS_USERS_ID INTO T_RESOLVER_ID FROM ERS_USERS WHERE ERS_USERNAME = RESOLVER;     SELECT REIMB_STATUS_ID INTO T_REIMB_STATUS_ID FROM ERS_REIMBURSEMENT_STATUS WHERE REIMB_STATUS = STATUS;     SELECT CURRENT_TIMESTAMP INTO T_RESOLVED FROM DUAL;          UPDATE ERS_REIMBURSEMENT SET REIMB_RESOLVED = T_RESOLVED, REIMB_RESOLVER = T_RESOLVER_ID, REIMB_STATUS_ID = T_REIMB_STATUS_ID      WHERE REIMB_ID = ID; END; / "; expected "QUEUE, NOWAIT, AS, CALL"; SQL statement:
CREATE OR REPLACE TRIGGER ERS_REIMB_ID_NULL_TRIG BEFORE INSERT ON ERS_REIMBURSEMENT FOR EACH ROW BEGIN         IF :new.REIMB_ID IS NULL THEN                 SELECT ERS_REIMB_ID_SEQ.nextval INTO :new.REIMB_ID FROM dual;         END IF;         IF :new.REIMB_STATUS_ID IS NULL THEN              SELECT 101 INTO :new.REIMB_STATUS_ID FROM dual;         END IF; END; /  CREATE OR REPLACE TRIGGER ERS_USERS_ID_NULL_TRIG BEFORE INSERT ON ERS_USERS FOR EACH ROW BEGIN         IF :new.ERS_USERS_ID IS NULL THEN                 SELECT ERS_USERS_ID_SEQ.nextval INTO :new.ERS_USERS_ID FROM dual;         END IF;                   SELECT GET_CUSTOMER_HASH(:NEW.ERS_USERNAME,:NEW.ERS_PASSWORD) INTO :NEW.ERS_PASSWORD FROM DUAL; END; /  CREATE OR REPLACE PROCEDURE INSERT_ERS_USERS_ID_NULL(ers_username IN VARCHAR2, ers_password VARCHAR2, user_first_name IN VARCHAR, user_last_name IN VARCHAR2, user_email IN VARCHAR, user_role_id IN NUMBER) IS BEGIN     INSERT INTO ERS_USERS VALUES(ERS_USERS_ID_SEQ.NEXTVAL, ers_username, ers_password, user_first_name, user_last_name, user_email, user_role_id);     COMMIT; END;     /   CREATE OR REPLACE TRIGGER ERS_REIMB_STATUS_ID_NULL_TRIG BEFORE INSERT ON ERS_REIMBURSEMENT_STATUS FOR EACH ROW BEGIN         IF :new.REIMB_STATUS_ID IS NULL THEN                 SELECT ERS_REIMB_STATUS_ID_SEQ.nextval INTO :new.REIMB_STATUS_ID FROM dual;         END IF; END; /   CREATE OR REPLACE PROCEDURE INSERT_ERS_REIMB_S_ID_NULL(reimb_status IN VARCHAR2) IS BEGIN     INSERT INTO ERS_REIMBURSEMENT_STATUS VALUES(ERS_REIMB_STATUS_ID_SEQ.NEXTVAL, reimb_status);     COMMIT; END; /   CREATE OR REPLACE TRIGGER ERS_REIMB_TYPE_ID_NULL_TRIG BEFORE INSERT ON ERS_REIMBURSEMENT_TYPE FOR EACH ROW BEGIN         IF :new.REIMB_TYPE_ID IS NULL THEN                 SELECT ERS_REIMB_TYPE_ID_SEQ.nextval INTO :new.REIMB_TYPE_ID FROM dual;         END IF; END; /  CREATE OR REPLACE PROCEDURE INSERT_ERS_REIMB_ID_NULL(reimb_amount IN NUMBER, reimb_submitted TIMESTAMP,  reimb_description IN VARCHAR, reimb_receipt IN BLOB, reimb_author IN VARCHAR2, reimb_typein IN VARCHAR2) IS     reimb_author_id NUMBER;     reimb_status_id NUMBER;     reimb_typeid NUMBER; BEGIN     SELECT ers_users_id INTO  reimb_author_id FROM ERS_USERS WHERE ERS_USERNAME = reimb_author;      SELECT reimb_type_id INTO reimb_typeid FROM ERS_REIMBURSEMENT_TYPE WHERE reimb_type = reimb_typein;      INSERT INTO ERS_REIMBURSEMENT(REIMB_ID, REIMB_AMOUNT, REIMB_SUBMITTED, REIMB_DESCRIPTION, REIMB_RECEIPT, REIMB_AUTHOR, REIMB_STATUS_ID, REIMB_TYPE_ID) VALUES(ERS_REIMB_ID_SEQ.NEXTVAL, reimb_amount, reimb_submitted, reimb_description, reimb_receipt, reimb_author_id, reimb_status_id, reimb_typeid);          COMMIT; END;     /  CREATE OR REPLACE PROCEDURE INSERT_ERS_REIMB_T_ID_NULL(reimb_type IN VARCHAR2) IS BEGIN     INSERT INTO ERS_REIMBURSEMENT_TYPE VALUES(ERS_REIMB_TYPE_ID_SEQ.NEXTVAL, reimb_type);     COMMIT; END; /  COMMIT;  CREATE OR REPLACE TRIGGER ERS_USER_ROLE_ID_NULL_TRIG BEFORE INSERT ON ERS_USER_ROLES FOR EACH ROW BEGIN         IF :new.ERS_USER_ROLE_ID IS NULL THEN                 SELECT ERS_USER_ROLE_ID_SEQ.nextval INTO :new.ERS_USER_ROLE_ID FROM dual;         END IF; END; /  CREATE OR REPLACE PROCEDURE INSERT_ERS_USER_ROLES_ID_NULL(user_role IN VARCHAR2) IS BEGIN     INSERT INTO ERS_USER_ROLES VALUES(ERS_USER_ROLE_ID_SEQ.NEXTVAL, user_role);     COMMIT; END; /INSERT INTO ERS_REIMBURSEMENT_TYPE (REIMB_TYPE) VALUES('Lodging'); INSERT INTO ERS_REIMBURSEMENT_TYPE (REIMB_TYPE) VALUES('Travel'); INSERT INTO ERS_REIMBURSEMENT_TYPE (REIMB_TYPE) VALUES('Food'); INSERT INTO ERS_REIMBURSEMENT_TYPE (REIMB_TYPE) VALUES('Other');INSERT INTO ERS_REIMBURSEMENT_STATUS (REIMB_STATUS) VALUES('Pending'); INSERT INTO ERS_REIMBURSEMENT_STATUS (REIMB_STATUS) VALUES('Approved'); INSERT INTO ERS_REIMBURSEMENT_STATUS (REIMB_STATUS) VALUES('Denied');INSERT INTO ERS_USER_ROLES (USER_ROLE) VALUES('Employee'); INSERT INTO ERS_USER_ROLES (USER_ROLE) VALUES('Admin');INSERT INTO ERS_USERS (ERS_USERNAME,ERS_PASSWORD,USER_FIRST_NAME,USER_LAST_NAME,USER_EMAIL,USER_ROLE_ID) VALUES('coltossoff','12345','Colt','Ossoff','coltossoff@gmail.com',301); INSERT INTO ERS_USERS (ERS_USERNAME,ERS_PASSWORD,USER_FIRST_NAME,USER_LAST_NAME,USER_EMAIL,USER_ROLE_ID) VALUES('seandoyle','12345','Sean','Doyle','SCDoyle316@gmail.com',301); INSERT INTO ERS_USERS (ERS_USERNAME,ERS_PASSWORD,USER_FIRST_NAME,USER_LAST_NAME,USER_EMAIL,USER_ROLE_ID) VALUES('phillippride','12345','Phillip','Pride','phillipjpride@gmail.com',301); INSERT INTO ERS_USERS (ERS_USERNAME,ERS_PASSWORD,USER_FIRST_NAME,USER_LAST_NAME,USER_EMAIL,USER_ROLE_ID) VALUES('kristenkavanagh','12345','Kristen','Kavanagh','Kristen.kavanagh.wright@gmail.com',301); INSERT INTO ERS_USERS (ERS_USERNAME,ERS_PASSWORD,USER_FIRST_NAME,USER_LAST_NAME,USER_EMAIL,USER_ROLE_ID) VALUES('alexandriawise','12345','Alexandria','Wise','alexandriarwise@gmail.com',301); INSERT INTO ERS_USERS (ERS_USERNAME,ERS_PASSWORD,USER_FIRST_NAME,USER_LAST_NAME,USER_EMAIL,USER_ROLE_ID) VALUES('michaeljung','12345','Michael','Jung','michael.jungrevature@gmail.com',301); INSERT INTO ERS_USERS (ERS_USERNAME,ERS_PASSWORD,USER_FIRST_NAME,USER_LAST_NAME,USER_EMAIL,USER_ROLE_ID) VALUES('bronwenhughes','12345','Bronwen','Hughes','bronwen@hughesnet.org',301); INSERT INTO ERS_USERS (ERS_USERNAME,ERS_PASSWORD,USER_FIRST_NAME,USER_LAST_NAME,USER_EMAIL,USER_ROLE_ID) VALUES('ryanwilliams','12345','Ryan','Williams','rrwilliams1600@gmail.com',301); INSERT INTO ERS_USERS (ERS_USERNAME,ERS_PASSWORD,USER_FIRST_NAME,USER_LAST_NAME,USER_EMAIL,USER_ROLE_ID) VALUES('vanessafountain','12345','Vanessa','Fountain','vanessa.s.fountain@gmail.com',301); INSERT INTO ERS_USERS (ERS_USERNAME,ERS_PASSWORD,USER_FIRST_NAME,USER_LAST_NAME,USER_EMAIL,USER_ROLE_ID) VALUES('louispipkin','12345','Louis','Pipkin','ldpipkin@gmail.com',301); INSERT INTO ERS_USERS (ERS_USERNAME,ERS_PASSWORD,USER_FIRST_NAME,USER_LAST_NAME,USER_EMAIL,USER_ROLE_ID) VALUES('joshuajibilian','12345','Joshua','Jibilian','jwjibilian@gmail.com',301); INSERT INTO ERS_USERS (ERS_USERNAME,ERS_PASSWORD,USER_FIRST_NAME,USER_LAST_NAME,USER_EMAIL,USER_ROLE_ID) VALUES('johnjosephsavath','12345','John','Savath','Johnsavath@gmail.com',301); INSERT INTO ERS_USERS (ERS_USERNAME,ERS_PASSWORD,USER_FIRST_NAME,USER_LAST_NAME,USER_EMAIL,USER_ROLE_ID) VALUES('michaelgrammens','12345','Michael','Grammens','MLGrammens@gmail.com',301); INSERT INTO ERS_USERS (ERS_USERNAME,ERS_PASSWORD,USER_FIRST_NAME,USER_LAST_NAME,USER_EMAIL,USER_ROLE_ID) VALUES('clementdikoko','12345','Clement','Dikoko','clementdikoko94@gmail.com',301); INSERT INTO ERS_USERS (ERS_USERNAME,ERS_PASSWORD,USER_FIRST_NAME,USER_LAST_NAME,USER_EMAIL,USER_ROLE_ID) VALUES('trevinchester','help','Trevin','Chester','Trevin.Chester@revature.com',302);CREATE OR REPLACE FUNCTION GET_CUSTOMER_HASH(USERNAME VARCHAR2, PWD VARCHAR2) RETURN VARCHAR2 IS EXTRA VARCHAR2(10) := 'SALT'; BEGIN   RETURN TO_CHAR(DBMS_OBFUSCATION_TOOLKIT.MD5(   INPUT => UTL_I18N.STRING_TO_RAW(DATA => USERNAME || PWD || EXTRA))); END; /  CREATE OR REPLACE TRIGGER USER_INSERT BEFORE INSERT ON ERS_USERS FOR EACH ROW BEGIN   /* INCREASE THE SEQUENCE */   IF :NEW.C_ID IS NULL THEN     SELECT CUSTOMER_SEQ.NEXTVAL INTO :NEW.C_ID FROM DUAL;   END IF;      /* SAVE HASH INSTEAD OF PASSWORD */   SELECT GET_CUSTOMER_HASH(:NEW.C_USERNAME,:NEW.C_PASSWORD) INTO :NEW.C_PASSWORD FROM DUAL; END; /CREATE OR REPLACE FUNCTION CHECK_CRENDENTIALS(USERNAME VARCHAR2, PWD VARCHAR2) RETURN VARCHAR2 IS     hash VARCHAR2(250); BEGIN     hash:= GET_CUSTOMER_HASH(USERNAME, PWD);     RETURN hash; END; /CREATE OR REPLACE PROCEDURE UPDATE_REIMB_STATUS(id IN NUMBER, status IN VARCHAR2, resolver IN VARCHAR2) IS    t_reimb_status_id NUMBER;    t_resolver_id NUMBER;    t_resolved TIMESTAMP; BEGIN     SELECT ers_users_id INTO t_resolver_id FROM ers_users WHERE ers_username = resolver;     SELECT reimb_status_id INTO t_reimb_status_id FROM ers_reimbursement_status WHERE reimb_status = status;     SELECT CURRENT_TIMESTAMP INTO t_resolved FROM dual;          UPDATE ers_reimbursement SET reimb_resolved = t_resolved, reimb_resolver = t_resolver_id, reimb_status_id = t_reimb_status_id      WHERE reimb_id = id; END; / [42001-197]
2018-11-25 13:53:08 jdbc[3]: exception
org.h2.jdbc.JdbcSQLException: Table "ERS_USER_ROLES" already exists; SQL statement:
CREATE TABLE ERS_USER_ROLES(     ERS_USER_ROLE_ID NUMBER PRIMARY KEY,     USER_ROLE VARCHAR2(10) NOT NULL );  CREATE TABLE ERS_REIMBURSEMENT_TYPE(     REIMB_TYPE_ID NUMBER PRIMARY KEY,     REIMB_TYPE VARCHAR2(10) NOT NULL );  CREATE TABLE ERS_REIMBURSEMENT_STATUS(     REIMB_STATUS_ID NUMBER PRIMARY KEY,     REIMB_STATUS VARCHAR2(10) NOT NULL );  CREATE TABLE ERS_USERS(     ERS_USERS_ID NUMBER PRIMARY KEY,     ERS_USERNAME VARCHAR2(50) UNIQUE,     ERS_PASSWORD VARCHAR2(50) NOT NULL,     USER_FIRST_NAME VARCHAR2(100) NOT NULL,     USER_LAST_NAME VARCHAR2(100) NOT NULL,     USER_EMAIL VARCHAR2(150) UNIQUE NOT NULL,     USER_ROLE_ID NUMBER NOT NULL,     FOREIGN KEY (USER_ROLE_ID) REFERENCES ERS_USER_ROLES(ERS_USER_ROLE_ID) );  CREATE TABLE ERS_REIMBURSEMENT(     REIMB_ID NUMBER PRIMARY KEY,     REIMB_AMOUNT NUMBER NOT NULL,     REIMB_SUBMITTED TIMESTAMP NOT NULL,     REIMB_RESOLVED TIMESTAMP,     REIMB_DESCRIPTION VARCHAR2(250),     REIMB_RECEIPT BLOB,     REIMB_AUTHOR NUMBER NOT NULL,     REIMB_RESOLVER NUMBER,     REIMB_STATUS_ID NUMBER NOT NULL,     REIMB_TYPE_ID NUMBER NOT NULL,      FOREIGN KEY (REIMB_AUTHOR) REFERENCES ERS_USERS(ERS_USERS_ID),      FOREIGN KEY (REIMB_RESOLVER) REFERENCES ERS_USERS(ERS_USERS_ID),      FOREIGN KEY (REIMB_STATUS_ID) REFERENCES ERS_REIMBURSEMENT_STATUS(REIMB_STATUS_ID),      FOREIGN KEY (REIMB_TYPE_ID) REFERENCES ERS_REIMBURSEMENT_TYPE(REIMB_TYPE_ID) );CREATE SEQUENCE ERS_REIMB_STATUS_ID_SEQ START WITH 101 INCREMENT BY 1;          CREATE SEQUENCE ERS_REIMB_TYPE_ID_SEQ START WITH 201 INCREMENT BY 1;  CREATE SEQUENCE ERS_USER_ROLE_ID_SEQ START WITH 301 INCREMENT BY 1;      CREATE SEQUENCE ERS_USERS_ID_SEQ START WITH 1001 INCREMENT BY 1;  CREATE SEQUENCE ERS_REIMB_ID_SEQ START WITH 2001 INCREMENT BY 1;CREATE OR REPLACE TRIGGER ERS_REIMB_ID_NULL_TRIG BEFORE INSERT ON ERS_REIMBURSEMENT FOR EACH ROW BEGIN         IF :new.REIMB_ID IS NULL THEN                 SELECT ERS_REIMB_ID_SEQ.nextval INTO :new.REIMB_ID FROM dual;         END IF;         IF :new.REIMB_STATUS_ID IS NULL THEN              SELECT 101 INTO :new.REIMB_STATUS_ID FROM dual;         END IF; END; /  CREATE OR REPLACE TRIGGER ERS_USERS_ID_NULL_TRIG BEFORE INSERT ON ERS_USERS FOR EACH ROW BEGIN         IF :new.ERS_USERS_ID IS NULL THEN                 SELECT ERS_USERS_ID_SEQ.nextval INTO :new.ERS_USERS_ID FROM dual;         END IF;                   SELECT GET_CUSTOMER_HASH(:NEW.ERS_USERNAME,:NEW.ERS_PASSWORD) INTO :NEW.ERS_PASSWORD FROM DUAL; END; /  CREATE OR REPLACE PROCEDURE INSERT_ERS_USERS_ID_NULL(ers_username IN VARCHAR2, ers_password VARCHAR2, user_first_name IN VARCHAR, user_last_name IN VARCHAR2, user_email IN VARCHAR, user_role_id IN NUMBER) IS BEGIN     INSERT INTO ERS_USERS VALUES(ERS_USERS_ID_SEQ.NEXTVAL, ers_username, ers_password, user_first_name, user_last_name, user_email, user_role_id);     COMMIT; END;     /   CREATE OR REPLACE TRIGGER ERS_REIMB_STATUS_ID_NULL_TRIG BEFORE INSERT ON ERS_REIMBURSEMENT_STATUS FOR EACH ROW BEGIN         IF :new.REIMB_STATUS_ID IS NULL THEN                 SELECT ERS_REIMB_STATUS_ID_SEQ.nextval INTO :new.REIMB_STATUS_ID FROM dual;         END IF; END; /   CREATE OR REPLACE PROCEDURE INSERT_ERS_REIMB_S_ID_NULL(reimb_status IN VARCHAR2) IS BEGIN     INSERT INTO ERS_REIMBURSEMENT_STATUS VALUES(ERS_REIMB_STATUS_ID_SEQ.NEXTVAL, reimb_status);     COMMIT; END; /   CREATE OR REPLACE TRIGGER ERS_REIMB_TYPE_ID_NULL_TRIG BEFORE INSERT ON ERS_REIMBURSEMENT_TYPE FOR EACH ROW BEGIN         IF :new.REIMB_TYPE_ID IS NULL THEN                 SELECT ERS_REIMB_TYPE_ID_SEQ.nextval INTO :new.REIMB_TYPE_ID FROM dual;         END IF; END; /  CREATE OR REPLACE PROCEDURE INSERT_ERS_REIMB_ID_NULL(reimb_amount IN NUMBER, reimb_submitted TIMESTAMP,  reimb_description IN VARCHAR, reimb_receipt IN BLOB, reimb_author IN VARCHAR2, reimb_typein IN VARCHAR2) IS     reimb_author_id NUMBER;     reimb_status_id NUMBER;     reimb_typeid NUMBER; BEGIN     SELECT ers_users_id INTO  reimb_author_id FROM ERS_USERS WHERE ERS_USERNAME = reimb_author;      SELECT reimb_type_id INTO reimb_typeid FROM ERS_REIMBURSEMENT_TYPE WHERE reimb_type = reimb_typein;      INSERT INTO ERS_REIMBURSEMENT(REIMB_ID, REIMB_AMOUNT, REIMB_SUBMITTED, REIMB_DESCRIPTION, REIMB_RECEIPT, REIMB_AUTHOR, REIMB_STATUS_ID, REIMB_TYPE_ID) VALUES(ERS_REIMB_ID_SEQ.NEXTVAL, reimb_amount, reimb_submitted, reimb_description, reimb_receipt, reimb_author_id, reimb_status_id, reimb_typeid);          COMMIT; END;     /  CREATE OR REPLACE PROCEDURE INSERT_ERS_REIMB_T_ID_NULL(reimb_type IN VARCHAR2) IS BEGIN     INSERT INTO ERS_REIMBURSEMENT_TYPE VALUES(ERS_REIMB_TYPE_ID_SEQ.NEXTVAL, reimb_type);     COMMIT; END; /  COMMIT;  CREATE OR REPLACE TRIGGER ERS_USER_ROLE_ID_NULL_TRIG BEFORE INSERT ON ERS_USER_ROLES FOR EACH ROW BEGIN         IF :new.ERS_USER_ROLE_ID IS NULL THEN                 SELECT ERS_USER_ROLE_ID_SEQ.nextval INTO :new.ERS_USER_ROLE_ID FROM dual;         END IF; END; /  CREATE OR REPLACE PROCEDURE INSERT_ERS_USER_ROLES_ID_NULL(user_role IN VARCHAR2) IS BEGIN     INSERT INTO ERS_USER_ROLES VALUES(ERS_USER_ROLE_ID_SEQ.NEXTVAL, user_role);     COMMIT; END; /INSERT INTO ERS_REIMBURSEMENT_TYPE (REIMB_TYPE) VALUES('Lodging'); INSERT INTO ERS_REIMBURSEMENT_TYPE (REIMB_TYPE) VALUES('Travel'); INSERT INTO ERS_REIMBURSEMENT_TYPE (REIMB_TYPE) VALUES('Food'); INSERT INTO ERS_REIMBURSEMENT_TYPE (REIMB_TYPE) VALUES('Other');INSERT INTO ERS_REIMBURSEMENT_STATUS (REIMB_STATUS) VALUES('Pending'); INSERT INTO ERS_REIMBURSEMENT_STATUS (REIMB_STATUS) VALUES('Approved'); INSERT INTO ERS_REIMBURSEMENT_STATUS (REIMB_STATUS) VALUES('Denied');INSERT INTO ERS_USER_ROLES (USER_ROLE) VALUES('Employee'); INSERT INTO ERS_USER_ROLES (USER_ROLE) VALUES('Admin');INSERT INTO ERS_USERS (ERS_USERNAME,ERS_PASSWORD,USER_FIRST_NAME,USER_LAST_NAME,USER_EMAIL,USER_ROLE_ID) VALUES('coltossoff','12345','Colt','Ossoff','coltossoff@gmail.com',301); INSERT INTO ERS_USERS (ERS_USERNAME,ERS_PASSWORD,USER_FIRST_NAME,USER_LAST_NAME,USER_EMAIL,USER_ROLE_ID) VALUES('seandoyle','12345','Sean','Doyle','SCDoyle316@gmail.com',301); INSERT INTO ERS_USERS (ERS_USERNAME,ERS_PASSWORD,USER_FIRST_NAME,USER_LAST_NAME,USER_EMAIL,USER_ROLE_ID) VALUES('phillippride','12345','Phillip','Pride','phillipjpride@gmail.com',301); INSERT INTO ERS_USERS (ERS_USERNAME,ERS_PASSWORD,USER_FIRST_NAME,USER_LAST_NAME,USER_EMAIL,USER_ROLE_ID) VALUES('kristenkavanagh','12345','Kristen','Kavanagh','Kristen.kavanagh.wright@gmail.com',301); INSERT INTO ERS_USERS (ERS_USERNAME,ERS_PASSWORD,USER_FIRST_NAME,USER_LAST_NAME,USER_EMAIL,USER_ROLE_ID) VALUES('alexandriawise','12345','Alexandria','Wise','alexandriarwise@gmail.com',301); INSERT INTO ERS_USERS (ERS_USERNAME,ERS_PASSWORD,USER_FIRST_NAME,USER_LAST_NAME,USER_EMAIL,USER_ROLE_ID) VALUES('michaeljung','12345','Michael','Jung','michael.jungrevature@gmail.com',301); INSERT INTO ERS_USERS (ERS_USERNAME,ERS_PASSWORD,USER_FIRST_NAME,USER_LAST_NAME,USER_EMAIL,USER_ROLE_ID) VALUES('bronwenhughes','12345','Bronwen','Hughes','bronwen@hughesnet.org',301); INSERT INTO ERS_USERS (ERS_USERNAME,ERS_PASSWORD,USER_FIRST_NAME,USER_LAST_NAME,USER_EMAIL,USER_ROLE_ID) VALUES('ryanwilliams','12345','Ryan','Williams','rrwilliams1600@gmail.com',301); INSERT INTO ERS_USERS (ERS_USERNAME,ERS_PASSWORD,USER_FIRST_NAME,USER_LAST_NAME,USER_EMAIL,USER_ROLE_ID) VALUES('vanessafountain','12345','Vanessa','Fountain','vanessa.s.fountain@gmail.com',301); INSERT INTO ERS_USERS (ERS_USERNAME,ERS_PASSWORD,USER_FIRST_NAME,USER_LAST_NAME,USER_EMAIL,USER_ROLE_ID) VALUES('louispipkin','12345','Louis','Pipkin','ldpipkin@gmail.com',301); INSERT INTO ERS_USERS (ERS_USERNAME,ERS_PASSWORD,USER_FIRST_NAME,USER_LAST_NAME,USER_EMAIL,USER_ROLE_ID) VALUES('joshuajibilian','12345','Joshua','Jibilian','jwjibilian@gmail.com',301); INSERT INTO ERS_USERS (ERS_USERNAME,ERS_PASSWORD,USER_FIRST_NAME,USER_LAST_NAME,USER_EMAIL,USER_ROLE_ID) VALUES('johnjosephsavath','12345','John','Savath','Johnsavath@gmail.com',301); INSERT INTO ERS_USERS (ERS_USERNAME,ERS_PASSWORD,USER_FIRST_NAME,USER_LAST_NAME,USER_EMAIL,USER_ROLE_ID) VALUES('michaelgrammens','12345','Michael','Grammens','MLGrammens@gmail.com',301); INSERT INTO ERS_USERS (ERS_USERNAME,ERS_PASSWORD,USER_FIRST_NAME,USER_LAST_NAME,USER_EMAIL,USER_ROLE_ID) VALUES('clementdikoko','12345','Clement','Dikoko','clementdikoko94@gmail.com',301); INSERT INTO ERS_USERS (ERS_USERNAME,ERS_PASSWORD,USER_FIRST_NAME,USER_LAST_NAME,USER_EMAIL,USER_ROLE_ID) VALUES('trevinchester','help','Trevin','Chester','Trevin.Chester@revature.com',302);CREATE OR REPLACE FUNCTION GET_CUSTOMER_HASH(USERNAME VARCHAR2, PWD VARCHAR2) RETURN VARCHAR2 IS EXTRA VARCHAR2(10) := 'SALT'; BEGIN   RETURN TO_CHAR(DBMS_OBFUSCATION_TOOLKIT.MD5(   INPUT => UTL_I18N.STRING_TO_RAW(DATA => USERNAME || PWD || EXTRA))); END; /  CREATE OR REPLACE TRIGGER USER_INSERT BEFORE INSERT ON ERS_USERS FOR EACH ROW BEGIN   /* INCREASE THE SEQUENCE */   IF :NEW.C_ID IS NULL THEN     SELECT CUSTOMER_SEQ.NEXTVAL INTO :NEW.C_ID FROM DUAL;   END IF;      /* SAVE HASH INSTEAD OF PASSWORD */   SELECT GET_CUSTOMER_HASH(:NEW.C_USERNAME,:NEW.C_PASSWORD) INTO :NEW.C_PASSWORD FROM DUAL; END; /CREATE OR REPLACE FUNCTION CHECK_CRENDENTIALS(USERNAME VARCHAR2, PWD VARCHAR2) RETURN VARCHAR2 IS     hash VARCHAR2(250); BEGIN     hash:= GET_CUSTOMER_HASH(USERNAME, PWD);     RETURN hash; END; /CREATE OR REPLACE PROCEDURE UPDATE_REIMB_STATUS(id IN NUMBER, status IN VARCHAR2, resolver IN VARCHAR2) IS    t_reimb_status_id NUMBER;    t_resolver_id NUMBER;    t_resolved TIMESTAMP; BEGIN     SELECT ers_users_id INTO t_resolver_id FROM ers_users WHERE ers_username = resolver;     SELECT reimb_status_id INTO t_reimb_status_id FROM ers_reimbursement_status WHERE reimb_status = status;     SELECT CURRENT_TIMESTAMP INTO t_resolved FROM dual;          UPDATE ers_reimbursement SET reimb_resolved = t_resolved, reimb_resolver = t_resolver_id, reimb_status_id = t_reimb_status_id      WHERE reimb_id = id; END; / [42101-197]
2018-11-25 13:54:01 jdbc[3]: exception
org.h2.jdbc.JdbcSQLException: Table "ERS_REIMBURSEMENT" not found; SQL statement:
DROP TABLE ERS_REIMBURSEMENT;
DROP TABLE ERS_USERS;
DROP TABLE ERS_USER_ROLES;
DROP TABLE ERS_REIMBURSEMENT_TYPE;
DROP TABLE ERS_REIMBURSEMENT_STATUS;DROP SEQUENCE ERS_REIMB_STATUS_ID_SEQ;
DROP SEQUENCE ERS_REIMB_ID_SEQ;
DROP SEQUENCE ERS_REIMB_TYPE_ID_SEQ;  
DROP SEQUENCE ERS_USER_ROLE_ID_SEQ;
DROP SEQUENCE ERS_USERS_ID_SEQ; [42102-197]
2018-11-25 13:54:14 jdbc[3]: exception
org.h2.jdbc.JdbcSQLException: Syntax error in SQL statement "CREATE OR REPLACE TRIGGER ERS_REIMB_ID_NULL_TRIG BEFORE INSERT ON ERS_REIMBURSEMENT FOR EACH ROW BEGIN[*]         IF :NEW.REIMB_ID IS NULL THEN                 SELECT ERS_REIMB_ID_SEQ.NEXTVAL INTO :NEW.REIMB_ID FROM DUAL;         END IF;         IF :NEW.REIMB_STATUS_ID IS NULL THEN              SELECT 101 INTO :NEW.REIMB_STATUS_ID FROM DUAL;         END IF; END; /  CREATE OR REPLACE TRIGGER ERS_USERS_ID_NULL_TRIG BEFORE INSERT ON ERS_USERS FOR EACH ROW BEGIN         IF :NEW.ERS_USERS_ID IS NULL THEN                 SELECT ERS_USERS_ID_SEQ.NEXTVAL INTO :NEW.ERS_USERS_ID FROM DUAL;         END IF;                   SELECT GET_CUSTOMER_HASH(:NEW.ERS_USERNAME,:NEW.ERS_PASSWORD) INTO :NEW.ERS_PASSWORD FROM DUAL; END; /  CREATE OR REPLACE PROCEDURE INSERT_ERS_USERS_ID_NULL(ERS_USERNAME IN VARCHAR2, ERS_PASSWORD VARCHAR2, USER_FIRST_NAME IN VARCHAR, USER_LAST_NAME IN VARCHAR2, USER_EMAIL IN VARCHAR, USER_ROLE_ID IN NUMBER) IS BEGIN     INSERT INTO ERS_USERS VALUES(ERS_USERS_ID_SEQ.NEXTVAL, ERS_USERNAME, ERS_PASSWORD, USER_FIRST_NAME, USER_LAST_NAME, USER_EMAIL, USER_ROLE_ID);     COMMIT; END;     /   CREATE OR REPLACE TRIGGER ERS_REIMB_STATUS_ID_NULL_TRIG BEFORE INSERT ON ERS_REIMBURSEMENT_STATUS FOR EACH ROW BEGIN         IF :NEW.REIMB_STATUS_ID IS NULL THEN                 SELECT ERS_REIMB_STATUS_ID_SEQ.NEXTVAL INTO :NEW.REIMB_STATUS_ID FROM DUAL;         END IF; END; /   CREATE OR REPLACE PROCEDURE INSERT_ERS_REIMB_S_ID_NULL(REIMB_STATUS IN VARCHAR2) IS BEGIN     INSERT INTO ERS_REIMBURSEMENT_STATUS VALUES(ERS_REIMB_STATUS_ID_SEQ.NEXTVAL, REIMB_STATUS);     COMMIT; END; /   CREATE OR REPLACE TRIGGER ERS_REIMB_TYPE_ID_NULL_TRIG BEFORE INSERT ON ERS_REIMBURSEMENT_TYPE FOR EACH ROW BEGIN         IF :NEW.REIMB_TYPE_ID IS NULL THEN                 SELECT ERS_REIMB_TYPE_ID_SEQ.NEXTVAL INTO :NEW.REIMB_TYPE_ID FROM DUAL;         END IF; END; /  CREATE OR REPLACE PROCEDURE INSERT_ERS_REIMB_ID_NULL(REIMB_AMOUNT IN NUMBER, REIMB_SUBMITTED TIMESTAMP,  REIMB_DESCRIPTION IN VARCHAR, REIMB_RECEIPT IN BLOB, REIMB_AUTHOR IN VARCHAR2, REIMB_TYPEIN IN VARCHAR2) IS     REIMB_AUTHOR_ID NUMBER;     REIMB_STATUS_ID NUMBER;     REIMB_TYPEID NUMBER; BEGIN     SELECT ERS_USERS_ID INTO  REIMB_AUTHOR_ID FROM ERS_USERS WHERE ERS_USERNAME = REIMB_AUTHOR;      SELECT REIMB_TYPE_ID INTO REIMB_TYPEID FROM ERS_REIMBURSEMENT_TYPE WHERE REIMB_TYPE = REIMB_TYPEIN;      INSERT INTO ERS_REIMBURSEMENT(REIMB_ID, REIMB_AMOUNT, REIMB_SUBMITTED, REIMB_DESCRIPTION, REIMB_RECEIPT, REIMB_AUTHOR, REIMB_STATUS_ID, REIMB_TYPE_ID) VALUES(ERS_REIMB_ID_SEQ.NEXTVAL, REIMB_AMOUNT, REIMB_SUBMITTED, REIMB_DESCRIPTION, REIMB_RECEIPT, REIMB_AUTHOR_ID, REIMB_STATUS_ID, REIMB_TYPEID);          COMMIT; END;     /  CREATE OR REPLACE PROCEDURE INSERT_ERS_REIMB_T_ID_NULL(REIMB_TYPE IN VARCHAR2) IS BEGIN     INSERT INTO ERS_REIMBURSEMENT_TYPE VALUES(ERS_REIMB_TYPE_ID_SEQ.NEXTVAL, REIMB_TYPE);     COMMIT; END; /  COMMIT;  CREATE OR REPLACE TRIGGER ERS_USER_ROLE_ID_NULL_TRIG BEFORE INSERT ON ERS_USER_ROLES FOR EACH ROW BEGIN         IF :NEW.ERS_USER_ROLE_ID IS NULL THEN                 SELECT ERS_USER_ROLE_ID_SEQ.NEXTVAL INTO :NEW.ERS_USER_ROLE_ID FROM DUAL;         END IF; END; /  CREATE OR REPLACE PROCEDURE INSERT_ERS_USER_ROLES_ID_NULL(USER_ROLE IN VARCHAR2) IS BEGIN     INSERT INTO ERS_USER_ROLES VALUES(ERS_USER_ROLE_ID_SEQ.NEXTVAL, USER_ROLE);     COMMIT; END; /INSERT INTO ERS_REIMBURSEMENT_TYPE (REIMB_TYPE) VALUES('Lodging'); INSERT INTO ERS_REIMBURSEMENT_TYPE (REIMB_TYPE) VALUES('Travel'); INSERT INTO ERS_REIMBURSEMENT_TYPE (REIMB_TYPE) VALUES('Food'); INSERT INTO ERS_REIMBURSEMENT_TYPE (REIMB_TYPE) VALUES('Other');INSERT INTO ERS_REIMBURSEMENT_STATUS (REIMB_STATUS) VALUES('Pending'); INSERT INTO ERS_REIMBURSEMENT_STATUS (REIMB_STATUS) VALUES('Approved'); INSERT INTO ERS_REIMBURSEMENT_STATUS (REIMB_STATUS) VALUES('Denied');INSERT INTO ERS_USER_ROLES (USER_ROLE) VALUES('Employee'); INSERT INTO ERS_USER_ROLES (USER_ROLE) VALUES('Admin');INSERT INTO ERS_USERS (ERS_USERNAME,ERS_PASSWORD,USER_FIRST_NAME,USER_LAST_NAME,USER_EMAIL,USER_ROLE_ID) VALUES('coltossoff','12345','Colt','Ossoff','coltossoff@gmail.com',301); INSERT INTO ERS_USERS (ERS_USERNAME,ERS_PASSWORD,USER_FIRST_NAME,USER_LAST_NAME,USER_EMAIL,USER_ROLE_ID) VALUES('seandoyle','12345','Sean','Doyle','SCDoyle316@gmail.com',301); INSERT INTO ERS_USERS (ERS_USERNAME,ERS_PASSWORD,USER_FIRST_NAME,USER_LAST_NAME,USER_EMAIL,USER_ROLE_ID) VALUES('phillippride','12345','Phillip','Pride','phillipjpride@gmail.com',301); INSERT INTO ERS_USERS (ERS_USERNAME,ERS_PASSWORD,USER_FIRST_NAME,USER_LAST_NAME,USER_EMAIL,USER_ROLE_ID) VALUES('kristenkavanagh','12345','Kristen','Kavanagh','Kristen.kavanagh.wright@gmail.com',301); INSERT INTO ERS_USERS (ERS_USERNAME,ERS_PASSWORD,USER_FIRST_NAME,USER_LAST_NAME,USER_EMAIL,USER_ROLE_ID) VALUES('alexandriawise','12345','Alexandria','Wise','alexandriarwise@gmail.com',301); INSERT INTO ERS_USERS (ERS_USERNAME,ERS_PASSWORD,USER_FIRST_NAME,USER_LAST_NAME,USER_EMAIL,USER_ROLE_ID) VALUES('michaeljung','12345','Michael','Jung','michael.jungrevature@gmail.com',301); INSERT INTO ERS_USERS (ERS_USERNAME,ERS_PASSWORD,USER_FIRST_NAME,USER_LAST_NAME,USER_EMAIL,USER_ROLE_ID) VALUES('bronwenhughes','12345','Bronwen','Hughes','bronwen@hughesnet.org',301); INSERT INTO ERS_USERS (ERS_USERNAME,ERS_PASSWORD,USER_FIRST_NAME,USER_LAST_NAME,USER_EMAIL,USER_ROLE_ID) VALUES('ryanwilliams','12345','Ryan','Williams','rrwilliams1600@gmail.com',301); INSERT INTO ERS_USERS (ERS_USERNAME,ERS_PASSWORD,USER_FIRST_NAME,USER_LAST_NAME,USER_EMAIL,USER_ROLE_ID) VALUES('vanessafountain','12345','Vanessa','Fountain','vanessa.s.fountain@gmail.com',301); INSERT INTO ERS_USERS (ERS_USERNAME,ERS_PASSWORD,USER_FIRST_NAME,USER_LAST_NAME,USER_EMAIL,USER_ROLE_ID) VALUES('louispipkin','12345','Louis','Pipkin','ldpipkin@gmail.com',301); INSERT INTO ERS_USERS (ERS_USERNAME,ERS_PASSWORD,USER_FIRST_NAME,USER_LAST_NAME,USER_EMAIL,USER_ROLE_ID) VALUES('joshuajibilian','12345','Joshua','Jibilian','jwjibilian@gmail.com',301); INSERT INTO ERS_USERS (ERS_USERNAME,ERS_PASSWORD,USER_FIRST_NAME,USER_LAST_NAME,USER_EMAIL,USER_ROLE_ID) VALUES('johnjosephsavath','12345','John','Savath','Johnsavath@gmail.com',301); INSERT INTO ERS_USERS (ERS_USERNAME,ERS_PASSWORD,USER_FIRST_NAME,USER_LAST_NAME,USER_EMAIL,USER_ROLE_ID) VALUES('michaelgrammens','12345','Michael','Grammens','MLGrammens@gmail.com',301); INSERT INTO ERS_USERS (ERS_USERNAME,ERS_PASSWORD,USER_FIRST_NAME,USER_LAST_NAME,USER_EMAIL,USER_ROLE_ID) VALUES('clementdikoko','12345','Clement','Dikoko','clementdikoko94@gmail.com',301); INSERT INTO ERS_USERS (ERS_USERNAME,ERS_PASSWORD,USER_FIRST_NAME,USER_LAST_NAME,USER_EMAIL,USER_ROLE_ID) VALUES('trevinchester','help','Trevin','Chester','Trevin.Chester@revature.com',302);CREATE OR REPLACE FUNCTION GET_CUSTOMER_HASH(USERNAME VARCHAR2, PWD VARCHAR2) RETURN VARCHAR2 IS EXTRA VARCHAR2(10) := 'SALT'; BEGIN   RETURN TO_CHAR(DBMS_OBFUSCATION_TOOLKIT.MD5(   INPUT => UTL_I18N.STRING_TO_RAW(DATA => USERNAME || PWD || EXTRA))); END; /  CREATE OR REPLACE TRIGGER USER_INSERT BEFORE INSERT ON ERS_USERS FOR EACH ROW BEGIN                                 IF :NEW.C_ID IS NULL THEN     SELECT CUSTOMER_SEQ.NEXTVAL INTO :NEW.C_ID FROM DUAL;   END IF;                                            SELECT GET_CUSTOMER_HASH(:NEW.C_USERNAME,:NEW.C_PASSWORD) INTO :NEW.C_PASSWORD FROM DUAL; END; /CREATE OR REPLACE FUNCTION CHECK_CRENDENTIALS(USERNAME VARCHAR2, PWD VARCHAR2) RETURN VARCHAR2 IS     HASH VARCHAR2(250); BEGIN     HASH:= GET_CUSTOMER_HASH(USERNAME, PWD);     RETURN HASH; END; /CREATE OR REPLACE PROCEDURE UPDATE_REIMB_STATUS(ID IN NUMBER, STATUS IN VARCHAR2, RESOLVER IN VARCHAR2) IS    T_REIMB_STATUS_ID NUMBER;    T_RESOLVER_ID NUMBER;    T_RESOLVED TIMESTAMP; BEGIN     SELECT ERS_USERS_ID INTO T_RESOLVER_ID FROM ERS_USERS WHERE ERS_USERNAME = RESOLVER;     SELECT REIMB_STATUS_ID INTO T_REIMB_STATUS_ID FROM ERS_REIMBURSEMENT_STATUS WHERE REIMB_STATUS = STATUS;     SELECT CURRENT_TIMESTAMP INTO T_RESOLVED FROM DUAL;          UPDATE ERS_REIMBURSEMENT SET REIMB_RESOLVED = T_RESOLVED, REIMB_RESOLVER = T_RESOLVER_ID, REIMB_STATUS_ID = T_REIMB_STATUS_ID      WHERE REIMB_ID = ID; END; / "; expected "QUEUE, NOWAIT, AS, CALL"; SQL statement:
CREATE OR REPLACE TRIGGER ERS_REIMB_ID_NULL_TRIG BEFORE INSERT ON ERS_REIMBURSEMENT FOR EACH ROW BEGIN         IF :new.REIMB_ID IS NULL THEN                 SELECT ERS_REIMB_ID_SEQ.nextval INTO :new.REIMB_ID FROM dual;         END IF;         IF :new.REIMB_STATUS_ID IS NULL THEN              SELECT 101 INTO :new.REIMB_STATUS_ID FROM dual;         END IF; END; /  CREATE OR REPLACE TRIGGER ERS_USERS_ID_NULL_TRIG BEFORE INSERT ON ERS_USERS FOR EACH ROW BEGIN         IF :new.ERS_USERS_ID IS NULL THEN                 SELECT ERS_USERS_ID_SEQ.nextval INTO :new.ERS_USERS_ID FROM dual;         END IF;                   SELECT GET_CUSTOMER_HASH(:NEW.ERS_USERNAME,:NEW.ERS_PASSWORD) INTO :NEW.ERS_PASSWORD FROM DUAL; END; /  CREATE OR REPLACE PROCEDURE INSERT_ERS_USERS_ID_NULL(ers_username IN VARCHAR2, ers_password VARCHAR2, user_first_name IN VARCHAR, user_last_name IN VARCHAR2, user_email IN VARCHAR, user_role_id IN NUMBER) IS BEGIN     INSERT INTO ERS_USERS VALUES(ERS_USERS_ID_SEQ.NEXTVAL, ers_username, ers_password, user_first_name, user_last_name, user_email, user_role_id);     COMMIT; END;     /   CREATE OR REPLACE TRIGGER ERS_REIMB_STATUS_ID_NULL_TRIG BEFORE INSERT ON ERS_REIMBURSEMENT_STATUS FOR EACH ROW BEGIN         IF :new.REIMB_STATUS_ID IS NULL THEN                 SELECT ERS_REIMB_STATUS_ID_SEQ.nextval INTO :new.REIMB_STATUS_ID FROM dual;         END IF; END; /   CREATE OR REPLACE PROCEDURE INSERT_ERS_REIMB_S_ID_NULL(reimb_status IN VARCHAR2) IS BEGIN     INSERT INTO ERS_REIMBURSEMENT_STATUS VALUES(ERS_REIMB_STATUS_ID_SEQ.NEXTVAL, reimb_status);     COMMIT; END; /   CREATE OR REPLACE TRIGGER ERS_REIMB_TYPE_ID_NULL_TRIG BEFORE INSERT ON ERS_REIMBURSEMENT_TYPE FOR EACH ROW BEGIN         IF :new.REIMB_TYPE_ID IS NULL THEN                 SELECT ERS_REIMB_TYPE_ID_SEQ.nextval INTO :new.REIMB_TYPE_ID FROM dual;         END IF; END; /  CREATE OR REPLACE PROCEDURE INSERT_ERS_REIMB_ID_NULL(reimb_amount IN NUMBER, reimb_submitted TIMESTAMP,  reimb_description IN VARCHAR, reimb_receipt IN BLOB, reimb_author IN VARCHAR2, reimb_typein IN VARCHAR2) IS     reimb_author_id NUMBER;     reimb_status_id NUMBER;     reimb_typeid NUMBER; BEGIN     SELECT ers_users_id INTO  reimb_author_id FROM ERS_USERS WHERE ERS_USERNAME = reimb_author;      SELECT reimb_type_id INTO reimb_typeid FROM ERS_REIMBURSEMENT_TYPE WHERE reimb_type = reimb_typein;      INSERT INTO ERS_REIMBURSEMENT(REIMB_ID, REIMB_AMOUNT, REIMB_SUBMITTED, REIMB_DESCRIPTION, REIMB_RECEIPT, REIMB_AUTHOR, REIMB_STATUS_ID, REIMB_TYPE_ID) VALUES(ERS_REIMB_ID_SEQ.NEXTVAL, reimb_amount, reimb_submitted, reimb_description, reimb_receipt, reimb_author_id, reimb_status_id, reimb_typeid);          COMMIT; END;     /  CREATE OR REPLACE PROCEDURE INSERT_ERS_REIMB_T_ID_NULL(reimb_type IN VARCHAR2) IS BEGIN     INSERT INTO ERS_REIMBURSEMENT_TYPE VALUES(ERS_REIMB_TYPE_ID_SEQ.NEXTVAL, reimb_type);     COMMIT; END; /  COMMIT;  CREATE OR REPLACE TRIGGER ERS_USER_ROLE_ID_NULL_TRIG BEFORE INSERT ON ERS_USER_ROLES FOR EACH ROW BEGIN         IF :new.ERS_USER_ROLE_ID IS NULL THEN                 SELECT ERS_USER_ROLE_ID_SEQ.nextval INTO :new.ERS_USER_ROLE_ID FROM dual;         END IF; END; /  CREATE OR REPLACE PROCEDURE INSERT_ERS_USER_ROLES_ID_NULL(user_role IN VARCHAR2) IS BEGIN     INSERT INTO ERS_USER_ROLES VALUES(ERS_USER_ROLE_ID_SEQ.NEXTVAL, user_role);     COMMIT; END; /INSERT INTO ERS_REIMBURSEMENT_TYPE (REIMB_TYPE) VALUES('Lodging'); INSERT INTO ERS_REIMBURSEMENT_TYPE (REIMB_TYPE) VALUES('Travel'); INSERT INTO ERS_REIMBURSEMENT_TYPE (REIMB_TYPE) VALUES('Food'); INSERT INTO ERS_REIMBURSEMENT_TYPE (REIMB_TYPE) VALUES('Other');INSERT INTO ERS_REIMBURSEMENT_STATUS (REIMB_STATUS) VALUES('Pending'); INSERT INTO ERS_REIMBURSEMENT_STATUS (REIMB_STATUS) VALUES('Approved'); INSERT INTO ERS_REIMBURSEMENT_STATUS (REIMB_STATUS) VALUES('Denied');INSERT INTO ERS_USER_ROLES (USER_ROLE) VALUES('Employee'); INSERT INTO ERS_USER_ROLES (USER_ROLE) VALUES('Admin');INSERT INTO ERS_USERS (ERS_USERNAME,ERS_PASSWORD,USER_FIRST_NAME,USER_LAST_NAME,USER_EMAIL,USER_ROLE_ID) VALUES('coltossoff','12345','Colt','Ossoff','coltossoff@gmail.com',301); INSERT INTO ERS_USERS (ERS_USERNAME,ERS_PASSWORD,USER_FIRST_NAME,USER_LAST_NAME,USER_EMAIL,USER_ROLE_ID) VALUES('seandoyle','12345','Sean','Doyle','SCDoyle316@gmail.com',301); INSERT INTO ERS_USERS (ERS_USERNAME,ERS_PASSWORD,USER_FIRST_NAME,USER_LAST_NAME,USER_EMAIL,USER_ROLE_ID) VALUES('phillippride','12345','Phillip','Pride','phillipjpride@gmail.com',301); INSERT INTO ERS_USERS (ERS_USERNAME,ERS_PASSWORD,USER_FIRST_NAME,USER_LAST_NAME,USER_EMAIL,USER_ROLE_ID) VALUES('kristenkavanagh','12345','Kristen','Kavanagh','Kristen.kavanagh.wright@gmail.com',301); INSERT INTO ERS_USERS (ERS_USERNAME,ERS_PASSWORD,USER_FIRST_NAME,USER_LAST_NAME,USER_EMAIL,USER_ROLE_ID) VALUES('alexandriawise','12345','Alexandria','Wise','alexandriarwise@gmail.com',301); INSERT INTO ERS_USERS (ERS_USERNAME,ERS_PASSWORD,USER_FIRST_NAME,USER_LAST_NAME,USER_EMAIL,USER_ROLE_ID) VALUES('michaeljung','12345','Michael','Jung','michael.jungrevature@gmail.com',301); INSERT INTO ERS_USERS (ERS_USERNAME,ERS_PASSWORD,USER_FIRST_NAME,USER_LAST_NAME,USER_EMAIL,USER_ROLE_ID) VALUES('bronwenhughes','12345','Bronwen','Hughes','bronwen@hughesnet.org',301); INSERT INTO ERS_USERS (ERS_USERNAME,ERS_PASSWORD,USER_FIRST_NAME,USER_LAST_NAME,USER_EMAIL,USER_ROLE_ID) VALUES('ryanwilliams','12345','Ryan','Williams','rrwilliams1600@gmail.com',301); INSERT INTO ERS_USERS (ERS_USERNAME,ERS_PASSWORD,USER_FIRST_NAME,USER_LAST_NAME,USER_EMAIL,USER_ROLE_ID) VALUES('vanessafountain','12345','Vanessa','Fountain','vanessa.s.fountain@gmail.com',301); INSERT INTO ERS_USERS (ERS_USERNAME,ERS_PASSWORD,USER_FIRST_NAME,USER_LAST_NAME,USER_EMAIL,USER_ROLE_ID) VALUES('louispipkin','12345','Louis','Pipkin','ldpipkin@gmail.com',301); INSERT INTO ERS_USERS (ERS_USERNAME,ERS_PASSWORD,USER_FIRST_NAME,USER_LAST_NAME,USER_EMAIL,USER_ROLE_ID) VALUES('joshuajibilian','12345','Joshua','Jibilian','jwjibilian@gmail.com',301); INSERT INTO ERS_USERS (ERS_USERNAME,ERS_PASSWORD,USER_FIRST_NAME,USER_LAST_NAME,USER_EMAIL,USER_ROLE_ID) VALUES('johnjosephsavath','12345','John','Savath','Johnsavath@gmail.com',301); INSERT INTO ERS_USERS (ERS_USERNAME,ERS_PASSWORD,USER_FIRST_NAME,USER_LAST_NAME,USER_EMAIL,USER_ROLE_ID) VALUES('michaelgrammens','12345','Michael','Grammens','MLGrammens@gmail.com',301); INSERT INTO ERS_USERS (ERS_USERNAME,ERS_PASSWORD,USER_FIRST_NAME,USER_LAST_NAME,USER_EMAIL,USER_ROLE_ID) VALUES('clementdikoko','12345','Clement','Dikoko','clementdikoko94@gmail.com',301); INSERT INTO ERS_USERS (ERS_USERNAME,ERS_PASSWORD,USER_FIRST_NAME,USER_LAST_NAME,USER_EMAIL,USER_ROLE_ID) VALUES('trevinchester','help','Trevin','Chester','Trevin.Chester@revature.com',302);CREATE OR REPLACE FUNCTION GET_CUSTOMER_HASH(USERNAME VARCHAR2, PWD VARCHAR2) RETURN VARCHAR2 IS EXTRA VARCHAR2(10) := 'SALT'; BEGIN   RETURN TO_CHAR(DBMS_OBFUSCATION_TOOLKIT.MD5(   INPUT => UTL_I18N.STRING_TO_RAW(DATA => USERNAME || PWD || EXTRA))); END; /  CREATE OR REPLACE TRIGGER USER_INSERT BEFORE INSERT ON ERS_USERS FOR EACH ROW BEGIN   /* INCREASE THE SEQUENCE */   IF :NEW.C_ID IS NULL THEN     SELECT CUSTOMER_SEQ.NEXTVAL INTO :NEW.C_ID FROM DUAL;   END IF;      /* SAVE HASH INSTEAD OF PASSWORD */   SELECT GET_CUSTOMER_HASH(:NEW.C_USERNAME,:NEW.C_PASSWORD) INTO :NEW.C_PASSWORD FROM DUAL; END; /CREATE OR REPLACE FUNCTION CHECK_CRENDENTIALS(USERNAME VARCHAR2, PWD VARCHAR2) RETURN VARCHAR2 IS     hash VARCHAR2(250); BEGIN     hash:= GET_CUSTOMER_HASH(USERNAME, PWD);     RETURN hash; END; /CREATE OR REPLACE PROCEDURE UPDATE_REIMB_STATUS(id IN NUMBER, status IN VARCHAR2, resolver IN VARCHAR2) IS    t_reimb_status_id NUMBER;    t_resolver_id NUMBER;    t_resolved TIMESTAMP; BEGIN     SELECT ers_users_id INTO t_resolver_id FROM ers_users WHERE ers_username = resolver;     SELECT reimb_status_id INTO t_reimb_status_id FROM ers_reimbursement_status WHERE reimb_status = status;     SELECT CURRENT_TIMESTAMP INTO t_resolved FROM dual;          UPDATE ers_reimbursement SET reimb_resolved = t_resolved, reimb_resolver = t_resolver_id, reimb_status_id = t_reimb_status_id      WHERE reimb_id = id; END; / [42001-197]
2018-11-25 13:59:11 jdbc[3]: exception
org.h2.jdbc.JdbcSQLException: Syntax error in SQL statement "CREATE OR REPLACE TRIGGER ERS_REIMB_ID_NULL_TRIG BEFORE INSERT ON ERS_REIMBURSEMENT FOR EACH ROW BEGIN[*]         IF :NEW.REIMB_ID IS NULL THEN                 SELECT ERS_REIMB_ID_SEQ.NEXTVAL INTO :NEW.REIMB_ID FROM DUAL;         END IF;         IF :NEW.REIMB_STATUS_ID IS NULL THEN              SELECT 101 INTO :NEW.REIMB_STATUS_ID FROM DUAL;         END IF; END; /  CREATE OR REPLACE TRIGGER ERS_USERS_ID_NULL_TRIG BEFORE INSERT ON ERS_USERS FOR EACH ROW BEGIN         IF :NEW.ERS_USERS_ID IS NULL THEN                 SELECT ERS_USERS_ID_SEQ.NEXTVAL INTO :NEW.ERS_USERS_ID FROM DUAL;         END IF;                   SELECT GET_CUSTOMER_HASH(:NEW.ERS_USERNAME,:NEW.ERS_PASSWORD) INTO :NEW.ERS_PASSWORD FROM DUAL; END; /  CREATE OR REPLACE PROCEDURE INSERT_ERS_USERS_ID_NULL(ERS_USERNAME IN VARCHAR2, ERS_PASSWORD VARCHAR2, USER_FIRST_NAME IN VARCHAR, USER_LAST_NAME IN VARCHAR2, USER_EMAIL IN VARCHAR, USER_ROLE_ID IN NUMBER) IS BEGIN     INSERT INTO ERS_USERS VALUES(ERS_USERS_ID_SEQ.NEXTVAL, ERS_USERNAME, ERS_PASSWORD, USER_FIRST_NAME, USER_LAST_NAME, USER_EMAIL, USER_ROLE_ID);     COMMIT; END;     /   CREATE OR REPLACE TRIGGER ERS_REIMB_STATUS_ID_NULL_TRIG BEFORE INSERT ON ERS_REIMBURSEMENT_STATUS FOR EACH ROW BEGIN         IF :NEW.REIMB_STATUS_ID IS NULL THEN                 SELECT ERS_REIMB_STATUS_ID_SEQ.NEXTVAL INTO :NEW.REIMB_STATUS_ID FROM DUAL;         END IF; END; /   CREATE OR REPLACE PROCEDURE INSERT_ERS_REIMB_S_ID_NULL(REIMB_STATUS IN VARCHAR2) IS BEGIN     INSERT INTO ERS_REIMBURSEMENT_STATUS VALUES(ERS_REIMB_STATUS_ID_SEQ.NEXTVAL, REIMB_STATUS);     COMMIT; END; /   CREATE OR REPLACE TRIGGER ERS_REIMB_TYPE_ID_NULL_TRIG BEFORE INSERT ON ERS_REIMBURSEMENT_TYPE FOR EACH ROW BEGIN         IF :NEW.REIMB_TYPE_ID IS NULL THEN                 SELECT ERS_REIMB_TYPE_ID_SEQ.NEXTVAL INTO :NEW.REIMB_TYPE_ID FROM DUAL;         END IF; END; /  CREATE OR REPLACE PROCEDURE INSERT_ERS_REIMB_ID_NULL(REIMB_AMOUNT IN NUMBER, REIMB_SUBMITTED TIMESTAMP,  REIMB_DESCRIPTION IN VARCHAR, REIMB_RECEIPT IN BLOB, REIMB_AUTHOR IN VARCHAR2, REIMB_TYPEIN IN VARCHAR2) IS     REIMB_AUTHOR_ID NUMBER;     REIMB_STATUS_ID NUMBER;     REIMB_TYPEID NUMBER; BEGIN     SELECT ERS_USERS_ID INTO  REIMB_AUTHOR_ID FROM ERS_USERS WHERE ERS_USERNAME = REIMB_AUTHOR;      SELECT REIMB_TYPE_ID INTO REIMB_TYPEID FROM ERS_REIMBURSEMENT_TYPE WHERE REIMB_TYPE = REIMB_TYPEIN;      INSERT INTO ERS_REIMBURSEMENT(REIMB_ID, REIMB_AMOUNT, REIMB_SUBMITTED, REIMB_DESCRIPTION, REIMB_RECEIPT, REIMB_AUTHOR, REIMB_STATUS_ID, REIMB_TYPE_ID) VALUES(ERS_REIMB_ID_SEQ.NEXTVAL, REIMB_AMOUNT, REIMB_SUBMITTED, REIMB_DESCRIPTION, REIMB_RECEIPT, REIMB_AUTHOR_ID, REIMB_STATUS_ID, REIMB_TYPEID);          COMMIT; END;     /  CREATE OR REPLACE PROCEDURE INSERT_ERS_REIMB_T_ID_NULL(REIMB_TYPE IN VARCHAR2) IS BEGIN     INSERT INTO ERS_REIMBURSEMENT_TYPE VALUES(ERS_REIMB_TYPE_ID_SEQ.NEXTVAL, REIMB_TYPE);     COMMIT; END; /  COMMIT;  CREATE OR REPLACE TRIGGER ERS_USER_ROLE_ID_NULL_TRIG BEFORE INSERT ON ERS_USER_ROLES FOR EACH ROW BEGIN         IF :NEW.ERS_USER_ROLE_ID IS NULL THEN                 SELECT ERS_USER_ROLE_ID_SEQ.NEXTVAL INTO :NEW.ERS_USER_ROLE_ID FROM DUAL;         END IF; END; /  CREATE OR REPLACE PROCEDURE INSERT_ERS_USER_ROLES_ID_NULL(USER_ROLE IN VARCHAR2) IS BEGIN     INSERT INTO ERS_USER_ROLES VALUES(ERS_USER_ROLE_ID_SEQ.NEXTVAL, USER_ROLE);     COMMIT; END; /INSERT INTO ERS_REIMBURSEMENT_TYPE (REIMB_TYPE) VALUES('Lodging'); INSERT INTO ERS_REIMBURSEMENT_TYPE (REIMB_TYPE) VALUES('Travel'); INSERT INTO ERS_REIMBURSEMENT_TYPE (REIMB_TYPE) VALUES('Food'); INSERT INTO ERS_REIMBURSEMENT_TYPE (REIMB_TYPE) VALUES('Other');INSERT INTO ERS_REIMBURSEMENT_STATUS (REIMB_STATUS) VALUES('Pending'); INSERT INTO ERS_REIMBURSEMENT_STATUS (REIMB_STATUS) VALUES('Approved'); INSERT INTO ERS_REIMBURSEMENT_STATUS (REIMB_STATUS) VALUES('Denied');INSERT INTO ERS_USER_ROLES (USER_ROLE) VALUES('Employee'); INSERT INTO ERS_USER_ROLES (USER_ROLE) VALUES('Admin');INSERT INTO ERS_USERS (ERS_USERNAME,ERS_PASSWORD,USER_FIRST_NAME,USER_LAST_NAME,USER_EMAIL,USER_ROLE_ID) VALUES('coltossoff','12345','Colt','Ossoff','coltossoff@gmail.com',301); INSERT INTO ERS_USERS (ERS_USERNAME,ERS_PASSWORD,USER_FIRST_NAME,USER_LAST_NAME,USER_EMAIL,USER_ROLE_ID) VALUES('seandoyle','12345','Sean','Doyle','SCDoyle316@gmail.com',301); INSERT INTO ERS_USERS (ERS_USERNAME,ERS_PASSWORD,USER_FIRST_NAME,USER_LAST_NAME,USER_EMAIL,USER_ROLE_ID) VALUES('phillippride','12345','Phillip','Pride','phillipjpride@gmail.com',301); INSERT INTO ERS_USERS (ERS_USERNAME,ERS_PASSWORD,USER_FIRST_NAME,USER_LAST_NAME,USER_EMAIL,USER_ROLE_ID) VALUES('kristenkavanagh','12345','Kristen','Kavanagh','Kristen.kavanagh.wright@gmail.com',301); INSERT INTO ERS_USERS (ERS_USERNAME,ERS_PASSWORD,USER_FIRST_NAME,USER_LAST_NAME,USER_EMAIL,USER_ROLE_ID) VALUES('alexandriawise','12345','Alexandria','Wise','alexandriarwise@gmail.com',301); INSERT INTO ERS_USERS (ERS_USERNAME,ERS_PASSWORD,USER_FIRST_NAME,USER_LAST_NAME,USER_EMAIL,USER_ROLE_ID) VALUES('michaeljung','12345','Michael','Jung','michael.jungrevature@gmail.com',301); INSERT INTO ERS_USERS (ERS_USERNAME,ERS_PASSWORD,USER_FIRST_NAME,USER_LAST_NAME,USER_EMAIL,USER_ROLE_ID) VALUES('bronwenhughes','12345','Bronwen','Hughes','bronwen@hughesnet.org',301); INSERT INTO ERS_USERS (ERS_USERNAME,ERS_PASSWORD,USER_FIRST_NAME,USER_LAST_NAME,USER_EMAIL,USER_ROLE_ID) VALUES('ryanwilliams','12345','Ryan','Williams','rrwilliams1600@gmail.com',301); INSERT INTO ERS_USERS (ERS_USERNAME,ERS_PASSWORD,USER_FIRST_NAME,USER_LAST_NAME,USER_EMAIL,USER_ROLE_ID) VALUES('vanessafountain','12345','Vanessa','Fountain','vanessa.s.fountain@gmail.com',301); INSERT INTO ERS_USERS (ERS_USERNAME,ERS_PASSWORD,USER_FIRST_NAME,USER_LAST_NAME,USER_EMAIL,USER_ROLE_ID) VALUES('louispipkin','12345','Louis','Pipkin','ldpipkin@gmail.com',301); INSERT INTO ERS_USERS (ERS_USERNAME,ERS_PASSWORD,USER_FIRST_NAME,USER_LAST_NAME,USER_EMAIL,USER_ROLE_ID) VALUES('joshuajibilian','12345','Joshua','Jibilian','jwjibilian@gmail.com',301); INSERT INTO ERS_USERS (ERS_USERNAME,ERS_PASSWORD,USER_FIRST_NAME,USER_LAST_NAME,USER_EMAIL,USER_ROLE_ID) VALUES('johnjosephsavath','12345','John','Savath','Johnsavath@gmail.com',301); INSERT INTO ERS_USERS (ERS_USERNAME,ERS_PASSWORD,USER_FIRST_NAME,USER_LAST_NAME,USER_EMAIL,USER_ROLE_ID) VALUES('michaelgrammens','12345','Michael','Grammens','MLGrammens@gmail.com',301); INSERT INTO ERS_USERS (ERS_USERNAME,ERS_PASSWORD,USER_FIRST_NAME,USER_LAST_NAME,USER_EMAIL,USER_ROLE_ID) VALUES('clementdikoko','12345','Clement','Dikoko','clementdikoko94@gmail.com',301); INSERT INTO ERS_USERS (ERS_USERNAME,ERS_PASSWORD,USER_FIRST_NAME,USER_LAST_NAME,USER_EMAIL,USER_ROLE_ID) VALUES('trevinchester','help','Trevin','Chester','Trevin.Chester@revature.com',302);CREATE OR REPLACE FUNCTION GET_CUSTOMER_HASH(USERNAME VARCHAR2, PWD VARCHAR2) RETURN VARCHAR2 IS EXTRA VARCHAR2(10) := 'SALT'; BEGIN   RETURN TO_CHAR(DBMS_OBFUSCATION_TOOLKIT.MD5(   INPUT => UTL_I18N.STRING_TO_RAW(DATA => USERNAME || PWD || EXTRA))); END; /  CREATE OR REPLACE TRIGGER USER_INSERT BEFORE INSERT ON ERS_USERS FOR EACH ROW BEGIN                                 IF :NEW.C_ID IS NULL THEN     SELECT CUSTOMER_SEQ.NEXTVAL INTO :NEW.C_ID FROM DUAL;   END IF;                                            SELECT GET_CUSTOMER_HASH(:NEW.C_USERNAME,:NEW.C_PASSWORD) INTO :NEW.C_PASSWORD FROM DUAL; END; /CREATE OR REPLACE FUNCTION CHECK_CRENDENTIALS(USERNAME VARCHAR2, PWD VARCHAR2) RETURN VARCHAR2 IS     HASH VARCHAR2(250); BEGIN     HASH:= GET_CUSTOMER_HASH(USERNAME, PWD);     RETURN HASH; END; /CREATE OR REPLACE PROCEDURE UPDATE_REIMB_STATUS(ID IN NUMBER, STATUS IN VARCHAR2, RESOLVER IN VARCHAR2) IS    T_REIMB_STATUS_ID NUMBER;    T_RESOLVER_ID NUMBER;    T_RESOLVED TIMESTAMP; BEGIN     SELECT ERS_USERS_ID INTO T_RESOLVER_ID FROM ERS_USERS WHERE ERS_USERNAME = RESOLVER;     SELECT REIMB_STATUS_ID INTO T_REIMB_STATUS_ID FROM ERS_REIMBURSEMENT_STATUS WHERE REIMB_STATUS = STATUS;     SELECT CURRENT_TIMESTAMP INTO T_RESOLVED FROM DUAL;          UPDATE ERS_REIMBURSEMENT SET REIMB_RESOLVED = T_RESOLVED, REIMB_RESOLVER = T_RESOLVER_ID, REIMB_STATUS_ID = T_REIMB_STATUS_ID      WHERE REIMB_ID = ID; END; / "; expected "QUEUE, NOWAIT, AS, CALL"; SQL statement:
CREATE OR REPLACE TRIGGER ERS_REIMB_ID_NULL_TRIG BEFORE INSERT ON ERS_REIMBURSEMENT FOR EACH ROW BEGIN         IF :new.REIMB_ID IS NULL THEN                 SELECT ERS_REIMB_ID_SEQ.nextval INTO :new.REIMB_ID FROM dual;         END IF;         IF :new.REIMB_STATUS_ID IS NULL THEN              SELECT 101 INTO :new.REIMB_STATUS_ID FROM dual;         END IF; END; /  CREATE OR REPLACE TRIGGER ERS_USERS_ID_NULL_TRIG BEFORE INSERT ON ERS_USERS FOR EACH ROW BEGIN         IF :new.ERS_USERS_ID IS NULL THEN                 SELECT ERS_USERS_ID_SEQ.nextval INTO :new.ERS_USERS_ID FROM dual;         END IF;                   SELECT GET_CUSTOMER_HASH(:NEW.ERS_USERNAME,:NEW.ERS_PASSWORD) INTO :NEW.ERS_PASSWORD FROM DUAL; END; /  CREATE OR REPLACE PROCEDURE INSERT_ERS_USERS_ID_NULL(ers_username IN VARCHAR2, ers_password VARCHAR2, user_first_name IN VARCHAR, user_last_name IN VARCHAR2, user_email IN VARCHAR, user_role_id IN NUMBER) IS BEGIN     INSERT INTO ERS_USERS VALUES(ERS_USERS_ID_SEQ.NEXTVAL, ers_username, ers_password, user_first_name, user_last_name, user_email, user_role_id);     COMMIT; END;     /   CREATE OR REPLACE TRIGGER ERS_REIMB_STATUS_ID_NULL_TRIG BEFORE INSERT ON ERS_REIMBURSEMENT_STATUS FOR EACH ROW BEGIN         IF :new.REIMB_STATUS_ID IS NULL THEN                 SELECT ERS_REIMB_STATUS_ID_SEQ.nextval INTO :new.REIMB_STATUS_ID FROM dual;         END IF; END; /   CREATE OR REPLACE PROCEDURE INSERT_ERS_REIMB_S_ID_NULL(reimb_status IN VARCHAR2) IS BEGIN     INSERT INTO ERS_REIMBURSEMENT_STATUS VALUES(ERS_REIMB_STATUS_ID_SEQ.NEXTVAL, reimb_status);     COMMIT; END; /   CREATE OR REPLACE TRIGGER ERS_REIMB_TYPE_ID_NULL_TRIG BEFORE INSERT ON ERS_REIMBURSEMENT_TYPE FOR EACH ROW BEGIN         IF :new.REIMB_TYPE_ID IS NULL THEN                 SELECT ERS_REIMB_TYPE_ID_SEQ.nextval INTO :new.REIMB_TYPE_ID FROM dual;         END IF; END; /  CREATE OR REPLACE PROCEDURE INSERT_ERS_REIMB_ID_NULL(reimb_amount IN NUMBER, reimb_submitted TIMESTAMP,  reimb_description IN VARCHAR, reimb_receipt IN BLOB, reimb_author IN VARCHAR2, reimb_typein IN VARCHAR2) IS     reimb_author_id NUMBER;     reimb_status_id NUMBER;     reimb_typeid NUMBER; BEGIN     SELECT ers_users_id INTO  reimb_author_id FROM ERS_USERS WHERE ERS_USERNAME = reimb_author;      SELECT reimb_type_id INTO reimb_typeid FROM ERS_REIMBURSEMENT_TYPE WHERE reimb_type = reimb_typein;      INSERT INTO ERS_REIMBURSEMENT(REIMB_ID, REIMB_AMOUNT, REIMB_SUBMITTED, REIMB_DESCRIPTION, REIMB_RECEIPT, REIMB_AUTHOR, REIMB_STATUS_ID, REIMB_TYPE_ID) VALUES(ERS_REIMB_ID_SEQ.NEXTVAL, reimb_amount, reimb_submitted, reimb_description, reimb_receipt, reimb_author_id, reimb_status_id, reimb_typeid);          COMMIT; END;     /  CREATE OR REPLACE PROCEDURE INSERT_ERS_REIMB_T_ID_NULL(reimb_type IN VARCHAR2) IS BEGIN     INSERT INTO ERS_REIMBURSEMENT_TYPE VALUES(ERS_REIMB_TYPE_ID_SEQ.NEXTVAL, reimb_type);     COMMIT; END; /  COMMIT;  CREATE OR REPLACE TRIGGER ERS_USER_ROLE_ID_NULL_TRIG BEFORE INSERT ON ERS_USER_ROLES FOR EACH ROW BEGIN         IF :new.ERS_USER_ROLE_ID IS NULL THEN                 SELECT ERS_USER_ROLE_ID_SEQ.nextval INTO :new.ERS_USER_ROLE_ID FROM dual;         END IF; END; /  CREATE OR REPLACE PROCEDURE INSERT_ERS_USER_ROLES_ID_NULL(user_role IN VARCHAR2) IS BEGIN     INSERT INTO ERS_USER_ROLES VALUES(ERS_USER_ROLE_ID_SEQ.NEXTVAL, user_role);     COMMIT; END; /INSERT INTO ERS_REIMBURSEMENT_TYPE (REIMB_TYPE) VALUES('Lodging'); INSERT INTO ERS_REIMBURSEMENT_TYPE (REIMB_TYPE) VALUES('Travel'); INSERT INTO ERS_REIMBURSEMENT_TYPE (REIMB_TYPE) VALUES('Food'); INSERT INTO ERS_REIMBURSEMENT_TYPE (REIMB_TYPE) VALUES('Other');INSERT INTO ERS_REIMBURSEMENT_STATUS (REIMB_STATUS) VALUES('Pending'); INSERT INTO ERS_REIMBURSEMENT_STATUS (REIMB_STATUS) VALUES('Approved'); INSERT INTO ERS_REIMBURSEMENT_STATUS (REIMB_STATUS) VALUES('Denied');INSERT INTO ERS_USER_ROLES (USER_ROLE) VALUES('Employee'); INSERT INTO ERS_USER_ROLES (USER_ROLE) VALUES('Admin');INSERT INTO ERS_USERS (ERS_USERNAME,ERS_PASSWORD,USER_FIRST_NAME,USER_LAST_NAME,USER_EMAIL,USER_ROLE_ID) VALUES('coltossoff','12345','Colt','Ossoff','coltossoff@gmail.com',301); INSERT INTO ERS_USERS (ERS_USERNAME,ERS_PASSWORD,USER_FIRST_NAME,USER_LAST_NAME,USER_EMAIL,USER_ROLE_ID) VALUES('seandoyle','12345','Sean','Doyle','SCDoyle316@gmail.com',301); INSERT INTO ERS_USERS (ERS_USERNAME,ERS_PASSWORD,USER_FIRST_NAME,USER_LAST_NAME,USER_EMAIL,USER_ROLE_ID) VALUES('phillippride','12345','Phillip','Pride','phillipjpride@gmail.com',301); INSERT INTO ERS_USERS (ERS_USERNAME,ERS_PASSWORD,USER_FIRST_NAME,USER_LAST_NAME,USER_EMAIL,USER_ROLE_ID) VALUES('kristenkavanagh','12345','Kristen','Kavanagh','Kristen.kavanagh.wright@gmail.com',301); INSERT INTO ERS_USERS (ERS_USERNAME,ERS_PASSWORD,USER_FIRST_NAME,USER_LAST_NAME,USER_EMAIL,USER_ROLE_ID) VALUES('alexandriawise','12345','Alexandria','Wise','alexandriarwise@gmail.com',301); INSERT INTO ERS_USERS (ERS_USERNAME,ERS_PASSWORD,USER_FIRST_NAME,USER_LAST_NAME,USER_EMAIL,USER_ROLE_ID) VALUES('michaeljung','12345','Michael','Jung','michael.jungrevature@gmail.com',301); INSERT INTO ERS_USERS (ERS_USERNAME,ERS_PASSWORD,USER_FIRST_NAME,USER_LAST_NAME,USER_EMAIL,USER_ROLE_ID) VALUES('bronwenhughes','12345','Bronwen','Hughes','bronwen@hughesnet.org',301); INSERT INTO ERS_USERS (ERS_USERNAME,ERS_PASSWORD,USER_FIRST_NAME,USER_LAST_NAME,USER_EMAIL,USER_ROLE_ID) VALUES('ryanwilliams','12345','Ryan','Williams','rrwilliams1600@gmail.com',301); INSERT INTO ERS_USERS (ERS_USERNAME,ERS_PASSWORD,USER_FIRST_NAME,USER_LAST_NAME,USER_EMAIL,USER_ROLE_ID) VALUES('vanessafountain','12345','Vanessa','Fountain','vanessa.s.fountain@gmail.com',301); INSERT INTO ERS_USERS (ERS_USERNAME,ERS_PASSWORD,USER_FIRST_NAME,USER_LAST_NAME,USER_EMAIL,USER_ROLE_ID) VALUES('louispipkin','12345','Louis','Pipkin','ldpipkin@gmail.com',301); INSERT INTO ERS_USERS (ERS_USERNAME,ERS_PASSWORD,USER_FIRST_NAME,USER_LAST_NAME,USER_EMAIL,USER_ROLE_ID) VALUES('joshuajibilian','12345','Joshua','Jibilian','jwjibilian@gmail.com',301); INSERT INTO ERS_USERS (ERS_USERNAME,ERS_PASSWORD,USER_FIRST_NAME,USER_LAST_NAME,USER_EMAIL,USER_ROLE_ID) VALUES('johnjosephsavath','12345','John','Savath','Johnsavath@gmail.com',301); INSERT INTO ERS_USERS (ERS_USERNAME,ERS_PASSWORD,USER_FIRST_NAME,USER_LAST_NAME,USER_EMAIL,USER_ROLE_ID) VALUES('michaelgrammens','12345','Michael','Grammens','MLGrammens@gmail.com',301); INSERT INTO ERS_USERS (ERS_USERNAME,ERS_PASSWORD,USER_FIRST_NAME,USER_LAST_NAME,USER_EMAIL,USER_ROLE_ID) VALUES('clementdikoko','12345','Clement','Dikoko','clementdikoko94@gmail.com',301); INSERT INTO ERS_USERS (ERS_USERNAME,ERS_PASSWORD,USER_FIRST_NAME,USER_LAST_NAME,USER_EMAIL,USER_ROLE_ID) VALUES('trevinchester','help','Trevin','Chester','Trevin.Chester@revature.com',302);CREATE OR REPLACE FUNCTION GET_CUSTOMER_HASH(USERNAME VARCHAR2, PWD VARCHAR2) RETURN VARCHAR2 IS EXTRA VARCHAR2(10) := 'SALT'; BEGIN   RETURN TO_CHAR(DBMS_OBFUSCATION_TOOLKIT.MD5(   INPUT => UTL_I18N.STRING_TO_RAW(DATA => USERNAME || PWD || EXTRA))); END; /  CREATE OR REPLACE TRIGGER USER_INSERT BEFORE INSERT ON ERS_USERS FOR EACH ROW BEGIN   /* INCREASE THE SEQUENCE */   IF :NEW.C_ID IS NULL THEN     SELECT CUSTOMER_SEQ.NEXTVAL INTO :NEW.C_ID FROM DUAL;   END IF;      /* SAVE HASH INSTEAD OF PASSWORD */   SELECT GET_CUSTOMER_HASH(:NEW.C_USERNAME,:NEW.C_PASSWORD) INTO :NEW.C_PASSWORD FROM DUAL; END; /CREATE OR REPLACE FUNCTION CHECK_CRENDENTIALS(USERNAME VARCHAR2, PWD VARCHAR2) RETURN VARCHAR2 IS     hash VARCHAR2(250); BEGIN     hash:= GET_CUSTOMER_HASH(USERNAME, PWD);     RETURN hash; END; /CREATE OR REPLACE PROCEDURE UPDATE_REIMB_STATUS(id IN NUMBER, status IN VARCHAR2, resolver IN VARCHAR2) IS    t_reimb_status_id NUMBER;    t_resolver_id NUMBER;    t_resolved TIMESTAMP; BEGIN     SELECT ers_users_id INTO t_resolver_id FROM ers_users WHERE ers_username = resolver;     SELECT reimb_status_id INTO t_reimb_status_id FROM ers_reimbursement_status WHERE reimb_status = status;     SELECT CURRENT_TIMESTAMP INTO t_resolved FROM dual;          UPDATE ers_reimbursement SET reimb_resolved = t_resolved, reimb_resolver = t_resolver_id, reimb_status_id = t_reimb_status_id      WHERE reimb_id = id; END; / [42001-197]
2018-11-25 13:59:11 jdbc[3]: exception
org.h2.jdbc.JdbcSQLException: Function "INSERT_ERS_REIMB_ID_NULL" not found; SQL statement:
  call insert_ers_reimb_id_null(?,?,?,?,?,?)   [90022-197]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:357)
	at org.h2.message.DbException.get(DbException.java:179)
	at org.h2.message.DbException.get(DbException.java:155)
	at org.h2.command.Parser.readJavaFunction(Parser.java:2699)
	at org.h2.command.Parser.readFunction(Parser.java:2756)
	at org.h2.command.Parser.readTerm(Parser.java:3102)
	at org.h2.command.Parser.readFactor(Parser.java:2587)
	at org.h2.command.Parser.readSum(Parser.java:2574)
	at org.h2.command.Parser.readConcat(Parser.java:2544)
	at org.h2.command.Parser.readCondition(Parser.java:2370)
	at org.h2.command.Parser.readAnd(Parser.java:2342)
	at org.h2.command.Parser.readExpression(Parser.java:2334)
	at org.h2.command.Parser.parseCall(Parser.java:4854)
	at org.h2.command.Parser.parsePrepared(Parser.java:382)
	at org.h2.command.Parser.parse(Parser.java:335)
	at org.h2.command.Parser.parse(Parser.java:307)
	at org.h2.command.Parser.prepareCommand(Parser.java:278)
	at org.h2.engine.Session.prepareLocal(Session.java:611)
	at org.h2.engine.Session.prepareCommand(Session.java:549)
	at org.h2.jdbc.JdbcConnection.prepareCommand(JdbcConnection.java:1247)
	at org.h2.jdbc.JdbcPreparedStatement.<init>(JdbcPreparedStatement.java:76)
	at org.h2.jdbc.JdbcCallableStatement.<init>(JdbcCallableStatement.java:50)
	at org.h2.jdbc.JdbcConnection.prepareCall(JdbcConnection.java:930)
	at com.kers.daos.ReimbursementDAOImpl.insertReimbursement(ReimbursementDAOImpl.java:45)
	at com.test.ReimbursementDaoTest.selectByNametest(ReimbursementDaoTest.java:42)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:89)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:41)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:541)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:763)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:463)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:209)
2018-11-25 14:00:19 jdbc[3]: exception
org.h2.jdbc.JdbcSQLException: Syntax error in SQL statement "CREATE OR REPLACE TRIGGER ERS_REIMB_ID_NULL_TRIG BEFORE INSERT ON ERS_REIMBURSEMENT FOR EACH ROW BEGIN[*]         IF :NEW.REIMB_ID IS NULL THEN                 SELECT ERS_REIMB_ID_SEQ.NEXTVAL INTO :NEW.REIMB_ID FROM DUAL;         END IF;         IF :NEW.REIMB_STATUS_ID IS NULL THEN              SELECT 101 INTO :NEW.REIMB_STATUS_ID FROM DUAL;         END IF; END; /  CREATE OR REPLACE TRIGGER ERS_USERS_ID_NULL_TRIG BEFORE INSERT ON ERS_USERS FOR EACH ROW BEGIN         IF :NEW.ERS_USERS_ID IS NULL THEN                 SELECT ERS_USERS_ID_SEQ.NEXTVAL INTO :NEW.ERS_USERS_ID FROM DUAL;         END IF;                   SELECT GET_CUSTOMER_HASH(:NEW.ERS_USERNAME,:NEW.ERS_PASSWORD) INTO :NEW.ERS_PASSWORD FROM DUAL; END; /  CREATE OR REPLACE PROCEDURE INSERT_ERS_USERS_ID_NULL(ERS_USERNAME IN VARCHAR2, ERS_PASSWORD VARCHAR2, USER_FIRST_NAME IN VARCHAR, USER_LAST_NAME IN VARCHAR2, USER_EMAIL IN VARCHAR, USER_ROLE_ID IN NUMBER) IS BEGIN     INSERT INTO ERS_USERS VALUES(ERS_USERS_ID_SEQ.NEXTVAL, ERS_USERNAME, ERS_PASSWORD, USER_FIRST_NAME, USER_LAST_NAME, USER_EMAIL, USER_ROLE_ID);     COMMIT; END;     /   CREATE OR REPLACE TRIGGER ERS_REIMB_STATUS_ID_NULL_TRIG BEFORE INSERT ON ERS_REIMBURSEMENT_STATUS FOR EACH ROW BEGIN         IF :NEW.REIMB_STATUS_ID IS NULL THEN                 SELECT ERS_REIMB_STATUS_ID_SEQ.NEXTVAL INTO :NEW.REIMB_STATUS_ID FROM DUAL;         END IF; END; /   CREATE OR REPLACE PROCEDURE INSERT_ERS_REIMB_S_ID_NULL(REIMB_STATUS IN VARCHAR2) IS BEGIN     INSERT INTO ERS_REIMBURSEMENT_STATUS VALUES(ERS_REIMB_STATUS_ID_SEQ.NEXTVAL, REIMB_STATUS);     COMMIT; END; /   CREATE OR REPLACE TRIGGER ERS_REIMB_TYPE_ID_NULL_TRIG BEFORE INSERT ON ERS_REIMBURSEMENT_TYPE FOR EACH ROW BEGIN         IF :NEW.REIMB_TYPE_ID IS NULL THEN                 SELECT ERS_REIMB_TYPE_ID_SEQ.NEXTVAL INTO :NEW.REIMB_TYPE_ID FROM DUAL;         END IF; END; /  CREATE OR REPLACE PROCEDURE INSERT_ERS_REIMB_ID_NULL(REIMB_AMOUNT IN NUMBER, REIMB_SUBMITTED TIMESTAMP,  REIMB_DESCRIPTION IN VARCHAR, REIMB_RECEIPT IN BLOB, REIMB_AUTHOR IN VARCHAR2, REIMB_TYPEIN IN VARCHAR2) IS     REIMB_AUTHOR_ID NUMBER;     REIMB_STATUS_ID NUMBER;     REIMB_TYPEID NUMBER; BEGIN     SELECT ERS_USERS_ID INTO  REIMB_AUTHOR_ID FROM ERS_USERS WHERE ERS_USERNAME = REIMB_AUTHOR;      SELECT REIMB_TYPE_ID INTO REIMB_TYPEID FROM ERS_REIMBURSEMENT_TYPE WHERE REIMB_TYPE = REIMB_TYPEIN;      INSERT INTO ERS_REIMBURSEMENT(REIMB_ID, REIMB_AMOUNT, REIMB_SUBMITTED, REIMB_DESCRIPTION, REIMB_RECEIPT, REIMB_AUTHOR, REIMB_STATUS_ID, REIMB_TYPE_ID) VALUES(ERS_REIMB_ID_SEQ.NEXTVAL, REIMB_AMOUNT, REIMB_SUBMITTED, REIMB_DESCRIPTION, REIMB_RECEIPT, REIMB_AUTHOR_ID, REIMB_STATUS_ID, REIMB_TYPEID);          COMMIT; END;     /  CREATE OR REPLACE PROCEDURE INSERT_ERS_REIMB_T_ID_NULL(REIMB_TYPE IN VARCHAR2) IS BEGIN     INSERT INTO ERS_REIMBURSEMENT_TYPE VALUES(ERS_REIMB_TYPE_ID_SEQ.NEXTVAL, REIMB_TYPE);     COMMIT; END; /  COMMIT;  CREATE OR REPLACE TRIGGER ERS_USER_ROLE_ID_NULL_TRIG BEFORE INSERT ON ERS_USER_ROLES FOR EACH ROW BEGIN         IF :NEW.ERS_USER_ROLE_ID IS NULL THEN                 SELECT ERS_USER_ROLE_ID_SEQ.NEXTVAL INTO :NEW.ERS_USER_ROLE_ID FROM DUAL;         END IF; END; /  CREATE OR REPLACE PROCEDURE INSERT_ERS_USER_ROLES_ID_NULL(USER_ROLE IN VARCHAR2) IS BEGIN     INSERT INTO ERS_USER_ROLES VALUES(ERS_USER_ROLE_ID_SEQ.NEXTVAL, USER_ROLE);     COMMIT; END; /INSERT INTO ERS_REIMBURSEMENT_TYPE (REIMB_TYPE) VALUES('Lodging'); INSERT INTO ERS_REIMBURSEMENT_TYPE (REIMB_TYPE) VALUES('Travel'); INSERT INTO ERS_REIMBURSEMENT_TYPE (REIMB_TYPE) VALUES('Food'); INSERT INTO ERS_REIMBURSEMENT_TYPE (REIMB_TYPE) VALUES('Other');INSERT INTO ERS_REIMBURSEMENT_STATUS (REIMB_STATUS) VALUES('Pending'); INSERT INTO ERS_REIMBURSEMENT_STATUS (REIMB_STATUS) VALUES('Approved'); INSERT INTO ERS_REIMBURSEMENT_STATUS (REIMB_STATUS) VALUES('Denied');INSERT INTO ERS_USER_ROLES (USER_ROLE) VALUES('Employee'); INSERT INTO ERS_USER_ROLES (USER_ROLE) VALUES('Admin');INSERT INTO ERS_USERS (ERS_USERNAME,ERS_PASSWORD,USER_FIRST_NAME,USER_LAST_NAME,USER_EMAIL,USER_ROLE_ID) VALUES('coltossoff','12345','Colt','Ossoff','coltossoff@gmail.com',301); INSERT INTO ERS_USERS (ERS_USERNAME,ERS_PASSWORD,USER_FIRST_NAME,USER_LAST_NAME,USER_EMAIL,USER_ROLE_ID) VALUES('seandoyle','12345','Sean','Doyle','SCDoyle316@gmail.com',301); INSERT INTO ERS_USERS (ERS_USERNAME,ERS_PASSWORD,USER_FIRST_NAME,USER_LAST_NAME,USER_EMAIL,USER_ROLE_ID) VALUES('phillippride','12345','Phillip','Pride','phillipjpride@gmail.com',301); INSERT INTO ERS_USERS (ERS_USERNAME,ERS_PASSWORD,USER_FIRST_NAME,USER_LAST_NAME,USER_EMAIL,USER_ROLE_ID) VALUES('kristenkavanagh','12345','Kristen','Kavanagh','Kristen.kavanagh.wright@gmail.com',301); INSERT INTO ERS_USERS (ERS_USERNAME,ERS_PASSWORD,USER_FIRST_NAME,USER_LAST_NAME,USER_EMAIL,USER_ROLE_ID) VALUES('alexandriawise','12345','Alexandria','Wise','alexandriarwise@gmail.com',301); INSERT INTO ERS_USERS (ERS_USERNAME,ERS_PASSWORD,USER_FIRST_NAME,USER_LAST_NAME,USER_EMAIL,USER_ROLE_ID) VALUES('michaeljung','12345','Michael','Jung','michael.jungrevature@gmail.com',301); INSERT INTO ERS_USERS (ERS_USERNAME,ERS_PASSWORD,USER_FIRST_NAME,USER_LAST_NAME,USER_EMAIL,USER_ROLE_ID) VALUES('bronwenhughes','12345','Bronwen','Hughes','bronwen@hughesnet.org',301); INSERT INTO ERS_USERS (ERS_USERNAME,ERS_PASSWORD,USER_FIRST_NAME,USER_LAST_NAME,USER_EMAIL,USER_ROLE_ID) VALUES('ryanwilliams','12345','Ryan','Williams','rrwilliams1600@gmail.com',301); INSERT INTO ERS_USERS (ERS_USERNAME,ERS_PASSWORD,USER_FIRST_NAME,USER_LAST_NAME,USER_EMAIL,USER_ROLE_ID) VALUES('vanessafountain','12345','Vanessa','Fountain','vanessa.s.fountain@gmail.com',301); INSERT INTO ERS_USERS (ERS_USERNAME,ERS_PASSWORD,USER_FIRST_NAME,USER_LAST_NAME,USER_EMAIL,USER_ROLE_ID) VALUES('louispipkin','12345','Louis','Pipkin','ldpipkin@gmail.com',301); INSERT INTO ERS_USERS (ERS_USERNAME,ERS_PASSWORD,USER_FIRST_NAME,USER_LAST_NAME,USER_EMAIL,USER_ROLE_ID) VALUES('joshuajibilian','12345','Joshua','Jibilian','jwjibilian@gmail.com',301); INSERT INTO ERS_USERS (ERS_USERNAME,ERS_PASSWORD,USER_FIRST_NAME,USER_LAST_NAME,USER_EMAIL,USER_ROLE_ID) VALUES('johnjosephsavath','12345','John','Savath','Johnsavath@gmail.com',301); INSERT INTO ERS_USERS (ERS_USERNAME,ERS_PASSWORD,USER_FIRST_NAME,USER_LAST_NAME,USER_EMAIL,USER_ROLE_ID) VALUES('michaelgrammens','12345','Michael','Grammens','MLGrammens@gmail.com',301); INSERT INTO ERS_USERS (ERS_USERNAME,ERS_PASSWORD,USER_FIRST_NAME,USER_LAST_NAME,USER_EMAIL,USER_ROLE_ID) VALUES('clementdikoko','12345','Clement','Dikoko','clementdikoko94@gmail.com',301); INSERT INTO ERS_USERS (ERS_USERNAME,ERS_PASSWORD,USER_FIRST_NAME,USER_LAST_NAME,USER_EMAIL,USER_ROLE_ID) VALUES('trevinchester','help','Trevin','Chester','Trevin.Chester@revature.com',302);CREATE OR REPLACE FUNCTION GET_CUSTOMER_HASH(USERNAME VARCHAR2, PWD VARCHAR2) RETURN VARCHAR2 IS EXTRA VARCHAR2(10) := 'SALT'; BEGIN   RETURN TO_CHAR(DBMS_OBFUSCATION_TOOLKIT.MD5(   INPUT => UTL_I18N.STRING_TO_RAW(DATA => USERNAME || PWD || EXTRA))); END; /  CREATE OR REPLACE TRIGGER USER_INSERT BEFORE INSERT ON ERS_USERS FOR EACH ROW BEGIN                                 IF :NEW.C_ID IS NULL THEN     SELECT CUSTOMER_SEQ.NEXTVAL INTO :NEW.C_ID FROM DUAL;   END IF;                                            SELECT GET_CUSTOMER_HASH(:NEW.C_USERNAME,:NEW.C_PASSWORD) INTO :NEW.C_PASSWORD FROM DUAL; END; /CREATE OR REPLACE FUNCTION CHECK_CRENDENTIALS(USERNAME VARCHAR2, PWD VARCHAR2) RETURN VARCHAR2 IS     HASH VARCHAR2(250); BEGIN     HASH:= GET_CUSTOMER_HASH(USERNAME, PWD);     RETURN HASH; END; /CREATE OR REPLACE PROCEDURE UPDATE_REIMB_STATUS(ID IN NUMBER, STATUS IN VARCHAR2, RESOLVER IN VARCHAR2) IS    T_REIMB_STATUS_ID NUMBER;    T_RESOLVER_ID NUMBER;    T_RESOLVED TIMESTAMP; BEGIN     SELECT ERS_USERS_ID INTO T_RESOLVER_ID FROM ERS_USERS WHERE ERS_USERNAME = RESOLVER;     SELECT REIMB_STATUS_ID INTO T_REIMB_STATUS_ID FROM ERS_REIMBURSEMENT_STATUS WHERE REIMB_STATUS = STATUS;     SELECT CURRENT_TIMESTAMP INTO T_RESOLVED FROM DUAL;          UPDATE ERS_REIMBURSEMENT SET REIMB_RESOLVED = T_RESOLVED, REIMB_RESOLVER = T_RESOLVER_ID, REIMB_STATUS_ID = T_REIMB_STATUS_ID      WHERE REIMB_ID = ID; END; / "; expected "QUEUE, NOWAIT, AS, CALL"; SQL statement:
CREATE OR REPLACE TRIGGER ERS_REIMB_ID_NULL_TRIG BEFORE INSERT ON ERS_REIMBURSEMENT FOR EACH ROW BEGIN         IF :new.REIMB_ID IS NULL THEN                 SELECT ERS_REIMB_ID_SEQ.nextval INTO :new.REIMB_ID FROM dual;         END IF;         IF :new.REIMB_STATUS_ID IS NULL THEN              SELECT 101 INTO :new.REIMB_STATUS_ID FROM dual;         END IF; END; /  CREATE OR REPLACE TRIGGER ERS_USERS_ID_NULL_TRIG BEFORE INSERT ON ERS_USERS FOR EACH ROW BEGIN         IF :new.ERS_USERS_ID IS NULL THEN                 SELECT ERS_USERS_ID_SEQ.nextval INTO :new.ERS_USERS_ID FROM dual;         END IF;                   SELECT GET_CUSTOMER_HASH(:NEW.ERS_USERNAME,:NEW.ERS_PASSWORD) INTO :NEW.ERS_PASSWORD FROM DUAL; END; /  CREATE OR REPLACE PROCEDURE INSERT_ERS_USERS_ID_NULL(ers_username IN VARCHAR2, ers_password VARCHAR2, user_first_name IN VARCHAR, user_last_name IN VARCHAR2, user_email IN VARCHAR, user_role_id IN NUMBER) IS BEGIN     INSERT INTO ERS_USERS VALUES(ERS_USERS_ID_SEQ.NEXTVAL, ers_username, ers_password, user_first_name, user_last_name, user_email, user_role_id);     COMMIT; END;     /   CREATE OR REPLACE TRIGGER ERS_REIMB_STATUS_ID_NULL_TRIG BEFORE INSERT ON ERS_REIMBURSEMENT_STATUS FOR EACH ROW BEGIN         IF :new.REIMB_STATUS_ID IS NULL THEN                 SELECT ERS_REIMB_STATUS_ID_SEQ.nextval INTO :new.REIMB_STATUS_ID FROM dual;         END IF; END; /   CREATE OR REPLACE PROCEDURE INSERT_ERS_REIMB_S_ID_NULL(reimb_status IN VARCHAR2) IS BEGIN     INSERT INTO ERS_REIMBURSEMENT_STATUS VALUES(ERS_REIMB_STATUS_ID_SEQ.NEXTVAL, reimb_status);     COMMIT; END; /   CREATE OR REPLACE TRIGGER ERS_REIMB_TYPE_ID_NULL_TRIG BEFORE INSERT ON ERS_REIMBURSEMENT_TYPE FOR EACH ROW BEGIN         IF :new.REIMB_TYPE_ID IS NULL THEN                 SELECT ERS_REIMB_TYPE_ID_SEQ.nextval INTO :new.REIMB_TYPE_ID FROM dual;         END IF; END; /  CREATE OR REPLACE PROCEDURE INSERT_ERS_REIMB_ID_NULL(reimb_amount IN NUMBER, reimb_submitted TIMESTAMP,  reimb_description IN VARCHAR, reimb_receipt IN BLOB, reimb_author IN VARCHAR2, reimb_typein IN VARCHAR2) IS     reimb_author_id NUMBER;     reimb_status_id NUMBER;     reimb_typeid NUMBER; BEGIN     SELECT ers_users_id INTO  reimb_author_id FROM ERS_USERS WHERE ERS_USERNAME = reimb_author;      SELECT reimb_type_id INTO reimb_typeid FROM ERS_REIMBURSEMENT_TYPE WHERE reimb_type = reimb_typein;      INSERT INTO ERS_REIMBURSEMENT(REIMB_ID, REIMB_AMOUNT, REIMB_SUBMITTED, REIMB_DESCRIPTION, REIMB_RECEIPT, REIMB_AUTHOR, REIMB_STATUS_ID, REIMB_TYPE_ID) VALUES(ERS_REIMB_ID_SEQ.NEXTVAL, reimb_amount, reimb_submitted, reimb_description, reimb_receipt, reimb_author_id, reimb_status_id, reimb_typeid);          COMMIT; END;     /  CREATE OR REPLACE PROCEDURE INSERT_ERS_REIMB_T_ID_NULL(reimb_type IN VARCHAR2) IS BEGIN     INSERT INTO ERS_REIMBURSEMENT_TYPE VALUES(ERS_REIMB_TYPE_ID_SEQ.NEXTVAL, reimb_type);     COMMIT; END; /  COMMIT;  CREATE OR REPLACE TRIGGER ERS_USER_ROLE_ID_NULL_TRIG BEFORE INSERT ON ERS_USER_ROLES FOR EACH ROW BEGIN         IF :new.ERS_USER_ROLE_ID IS NULL THEN                 SELECT ERS_USER_ROLE_ID_SEQ.nextval INTO :new.ERS_USER_ROLE_ID FROM dual;         END IF; END; /  CREATE OR REPLACE PROCEDURE INSERT_ERS_USER_ROLES_ID_NULL(user_role IN VARCHAR2) IS BEGIN     INSERT INTO ERS_USER_ROLES VALUES(ERS_USER_ROLE_ID_SEQ.NEXTVAL, user_role);     COMMIT; END; /INSERT INTO ERS_REIMBURSEMENT_TYPE (REIMB_TYPE) VALUES('Lodging'); INSERT INTO ERS_REIMBURSEMENT_TYPE (REIMB_TYPE) VALUES('Travel'); INSERT INTO ERS_REIMBURSEMENT_TYPE (REIMB_TYPE) VALUES('Food'); INSERT INTO ERS_REIMBURSEMENT_TYPE (REIMB_TYPE) VALUES('Other');INSERT INTO ERS_REIMBURSEMENT_STATUS (REIMB_STATUS) VALUES('Pending'); INSERT INTO ERS_REIMBURSEMENT_STATUS (REIMB_STATUS) VALUES('Approved'); INSERT INTO ERS_REIMBURSEMENT_STATUS (REIMB_STATUS) VALUES('Denied');INSERT INTO ERS_USER_ROLES (USER_ROLE) VALUES('Employee'); INSERT INTO ERS_USER_ROLES (USER_ROLE) VALUES('Admin');INSERT INTO ERS_USERS (ERS_USERNAME,ERS_PASSWORD,USER_FIRST_NAME,USER_LAST_NAME,USER_EMAIL,USER_ROLE_ID) VALUES('coltossoff','12345','Colt','Ossoff','coltossoff@gmail.com',301); INSERT INTO ERS_USERS (ERS_USERNAME,ERS_PASSWORD,USER_FIRST_NAME,USER_LAST_NAME,USER_EMAIL,USER_ROLE_ID) VALUES('seandoyle','12345','Sean','Doyle','SCDoyle316@gmail.com',301); INSERT INTO ERS_USERS (ERS_USERNAME,ERS_PASSWORD,USER_FIRST_NAME,USER_LAST_NAME,USER_EMAIL,USER_ROLE_ID) VALUES('phillippride','12345','Phillip','Pride','phillipjpride@gmail.com',301); INSERT INTO ERS_USERS (ERS_USERNAME,ERS_PASSWORD,USER_FIRST_NAME,USER_LAST_NAME,USER_EMAIL,USER_ROLE_ID) VALUES('kristenkavanagh','12345','Kristen','Kavanagh','Kristen.kavanagh.wright@gmail.com',301); INSERT INTO ERS_USERS (ERS_USERNAME,ERS_PASSWORD,USER_FIRST_NAME,USER_LAST_NAME,USER_EMAIL,USER_ROLE_ID) VALUES('alexandriawise','12345','Alexandria','Wise','alexandriarwise@gmail.com',301); INSERT INTO ERS_USERS (ERS_USERNAME,ERS_PASSWORD,USER_FIRST_NAME,USER_LAST_NAME,USER_EMAIL,USER_ROLE_ID) VALUES('michaeljung','12345','Michael','Jung','michael.jungrevature@gmail.com',301); INSERT INTO ERS_USERS (ERS_USERNAME,ERS_PASSWORD,USER_FIRST_NAME,USER_LAST_NAME,USER_EMAIL,USER_ROLE_ID) VALUES('bronwenhughes','12345','Bronwen','Hughes','bronwen@hughesnet.org',301); INSERT INTO ERS_USERS (ERS_USERNAME,ERS_PASSWORD,USER_FIRST_NAME,USER_LAST_NAME,USER_EMAIL,USER_ROLE_ID) VALUES('ryanwilliams','12345','Ryan','Williams','rrwilliams1600@gmail.com',301); INSERT INTO ERS_USERS (ERS_USERNAME,ERS_PASSWORD,USER_FIRST_NAME,USER_LAST_NAME,USER_EMAIL,USER_ROLE_ID) VALUES('vanessafountain','12345','Vanessa','Fountain','vanessa.s.fountain@gmail.com',301); INSERT INTO ERS_USERS (ERS_USERNAME,ERS_PASSWORD,USER_FIRST_NAME,USER_LAST_NAME,USER_EMAIL,USER_ROLE_ID) VALUES('louispipkin','12345','Louis','Pipkin','ldpipkin@gmail.com',301); INSERT INTO ERS_USERS (ERS_USERNAME,ERS_PASSWORD,USER_FIRST_NAME,USER_LAST_NAME,USER_EMAIL,USER_ROLE_ID) VALUES('joshuajibilian','12345','Joshua','Jibilian','jwjibilian@gmail.com',301); INSERT INTO ERS_USERS (ERS_USERNAME,ERS_PASSWORD,USER_FIRST_NAME,USER_LAST_NAME,USER_EMAIL,USER_ROLE_ID) VALUES('johnjosephsavath','12345','John','Savath','Johnsavath@gmail.com',301); INSERT INTO ERS_USERS (ERS_USERNAME,ERS_PASSWORD,USER_FIRST_NAME,USER_LAST_NAME,USER_EMAIL,USER_ROLE_ID) VALUES('michaelgrammens','12345','Michael','Grammens','MLGrammens@gmail.com',301); INSERT INTO ERS_USERS (ERS_USERNAME,ERS_PASSWORD,USER_FIRST_NAME,USER_LAST_NAME,USER_EMAIL,USER_ROLE_ID) VALUES('clementdikoko','12345','Clement','Dikoko','clementdikoko94@gmail.com',301); INSERT INTO ERS_USERS (ERS_USERNAME,ERS_PASSWORD,USER_FIRST_NAME,USER_LAST_NAME,USER_EMAIL,USER_ROLE_ID) VALUES('trevinchester','help','Trevin','Chester','Trevin.Chester@revature.com',302);CREATE OR REPLACE FUNCTION GET_CUSTOMER_HASH(USERNAME VARCHAR2, PWD VARCHAR2) RETURN VARCHAR2 IS EXTRA VARCHAR2(10) := 'SALT'; BEGIN   RETURN TO_CHAR(DBMS_OBFUSCATION_TOOLKIT.MD5(   INPUT => UTL_I18N.STRING_TO_RAW(DATA => USERNAME || PWD || EXTRA))); END; /  CREATE OR REPLACE TRIGGER USER_INSERT BEFORE INSERT ON ERS_USERS FOR EACH ROW BEGIN   /* INCREASE THE SEQUENCE */   IF :NEW.C_ID IS NULL THEN     SELECT CUSTOMER_SEQ.NEXTVAL INTO :NEW.C_ID FROM DUAL;   END IF;      /* SAVE HASH INSTEAD OF PASSWORD */   SELECT GET_CUSTOMER_HASH(:NEW.C_USERNAME,:NEW.C_PASSWORD) INTO :NEW.C_PASSWORD FROM DUAL; END; /CREATE OR REPLACE FUNCTION CHECK_CRENDENTIALS(USERNAME VARCHAR2, PWD VARCHAR2) RETURN VARCHAR2 IS     hash VARCHAR2(250); BEGIN     hash:= GET_CUSTOMER_HASH(USERNAME, PWD);     RETURN hash; END; /CREATE OR REPLACE PROCEDURE UPDATE_REIMB_STATUS(id IN NUMBER, status IN VARCHAR2, resolver IN VARCHAR2) IS    t_reimb_status_id NUMBER;    t_resolver_id NUMBER;    t_resolved TIMESTAMP; BEGIN     SELECT ers_users_id INTO t_resolver_id FROM ers_users WHERE ers_username = resolver;     SELECT reimb_status_id INTO t_reimb_status_id FROM ers_reimbursement_status WHERE reimb_status = status;     SELECT CURRENT_TIMESTAMP INTO t_resolved FROM dual;          UPDATE ers_reimbursement SET reimb_resolved = t_resolved, reimb_resolver = t_resolver_id, reimb_status_id = t_reimb_status_id      WHERE reimb_id = id; END; / [42001-197]
2018-11-25 14:00:19 jdbc[3]: exception
org.h2.jdbc.JdbcSQLException: Function "INSERT_ERS_REIMB_ID_NULL" not found; SQL statement:
  call insert_ers_reimb_id_null(?,?,?,?,?,?)   [90022-197]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:357)
	at org.h2.message.DbException.get(DbException.java:179)
	at org.h2.message.DbException.get(DbException.java:155)
	at org.h2.command.Parser.readJavaFunction(Parser.java:2699)
	at org.h2.command.Parser.readFunction(Parser.java:2756)
	at org.h2.command.Parser.readTerm(Parser.java:3102)
	at org.h2.command.Parser.readFactor(Parser.java:2587)
	at org.h2.command.Parser.readSum(Parser.java:2574)
	at org.h2.command.Parser.readConcat(Parser.java:2544)
	at org.h2.command.Parser.readCondition(Parser.java:2370)
	at org.h2.command.Parser.readAnd(Parser.java:2342)
	at org.h2.command.Parser.readExpression(Parser.java:2334)
	at org.h2.command.Parser.parseCall(Parser.java:4854)
	at org.h2.command.Parser.parsePrepared(Parser.java:382)
	at org.h2.command.Parser.parse(Parser.java:335)
	at org.h2.command.Parser.parse(Parser.java:307)
	at org.h2.command.Parser.prepareCommand(Parser.java:278)
	at org.h2.engine.Session.prepareLocal(Session.java:611)
	at org.h2.engine.Session.prepareCommand(Session.java:549)
	at org.h2.jdbc.JdbcConnection.prepareCommand(JdbcConnection.java:1247)
	at org.h2.jdbc.JdbcPreparedStatement.<init>(JdbcPreparedStatement.java:76)
	at org.h2.jdbc.JdbcCallableStatement.<init>(JdbcCallableStatement.java:50)
	at org.h2.jdbc.JdbcConnection.prepareCall(JdbcConnection.java:930)
	at com.kers.daos.ReimbursementDAOImpl.insertReimbursement(ReimbursementDAOImpl.java:45)
	at com.test.ReimbursementDaoTest.selectByNametest(ReimbursementDaoTest.java:42)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:89)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:41)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:541)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:763)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:463)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:209)
2018-11-25 14:03:05 jdbc[3]: exception
org.h2.jdbc.JdbcSQLException: Syntax error in SQL statement "CREATE OR REPLACE TRIGGER ERS_REIMB_ID_NULL_TRIG BEFORE INSERT ON ERS_REIMBURSEMENT FOR EACH ROW BEGIN[*]         IF :NEW.REIMB_ID IS NULL THEN                 SELECT ERS_REIMB_ID_SEQ.NEXTVAL INTO :NEW.REIMB_ID FROM DUAL;         END IF;         IF :NEW.REIMB_STATUS_ID IS NULL THEN              SELECT 101 INTO :NEW.REIMB_STATUS_ID FROM DUAL;         END IF; END; /  CREATE OR REPLACE TRIGGER ERS_USERS_ID_NULL_TRIG BEFORE INSERT ON ERS_USERS FOR EACH ROW BEGIN         IF :NEW.ERS_USERS_ID IS NULL THEN                 SELECT ERS_USERS_ID_SEQ.NEXTVAL INTO :NEW.ERS_USERS_ID FROM DUAL;         END IF;                   SELECT GET_CUSTOMER_HASH(:NEW.ERS_USERNAME,:NEW.ERS_PASSWORD) INTO :NEW.ERS_PASSWORD FROM DUAL; END; /  CREATE OR REPLACE PROCEDURE INSERT_ERS_USERS_ID_NULL(ERS_USERNAME IN VARCHAR2, ERS_PASSWORD VARCHAR2, USER_FIRST_NAME IN VARCHAR, USER_LAST_NAME IN VARCHAR2, USER_EMAIL IN VARCHAR, USER_ROLE_ID IN NUMBER) IS BEGIN     INSERT INTO ERS_USERS VALUES(ERS_USERS_ID_SEQ.NEXTVAL, ERS_USERNAME, ERS_PASSWORD, USER_FIRST_NAME, USER_LAST_NAME, USER_EMAIL, USER_ROLE_ID);     COMMIT; END;     /   CREATE OR REPLACE TRIGGER ERS_REIMB_STATUS_ID_NULL_TRIG BEFORE INSERT ON ERS_REIMBURSEMENT_STATUS FOR EACH ROW BEGIN         IF :NEW.REIMB_STATUS_ID IS NULL THEN                 SELECT ERS_REIMB_STATUS_ID_SEQ.NEXTVAL INTO :NEW.REIMB_STATUS_ID FROM DUAL;         END IF; END; /   CREATE OR REPLACE PROCEDURE INSERT_ERS_REIMB_S_ID_NULL(REIMB_STATUS IN VARCHAR2) IS BEGIN     INSERT INTO ERS_REIMBURSEMENT_STATUS VALUES(ERS_REIMB_STATUS_ID_SEQ.NEXTVAL, REIMB_STATUS);     COMMIT; END; /   CREATE OR REPLACE TRIGGER ERS_REIMB_TYPE_ID_NULL_TRIG BEFORE INSERT ON ERS_REIMBURSEMENT_TYPE FOR EACH ROW BEGIN         IF :NEW.REIMB_TYPE_ID IS NULL THEN                 SELECT ERS_REIMB_TYPE_ID_SEQ.NEXTVAL INTO :NEW.REIMB_TYPE_ID FROM DUAL;         END IF; END; /   CREATE OR REPLACE PROCEDURE INSERT_ERS_REIMB_ID_NULL(REIMB_AMOUNT IN NUMBER, REIMB_SUBMITTED TIMESTAMP,  REIMB_DESCRIPTION IN VARCHAR, REIMB_RECEIPT IN BLOB, REIMB_AUTHOR IN VARCHAR2, REIMB_TYPEIN IN VARCHAR2) IS     REIMB_AUTHOR_ID NUMBER;     REIMB_STATUS_ID NUMBER;     REIMB_TYPEID NUMBER; BEGIN     SELECT ERS_USERS_ID INTO  REIMB_AUTHOR_ID FROM ERS_USERS WHERE ERS_USERNAME = REIMB_AUTHOR;      SELECT REIMB_TYPE_ID INTO REIMB_TYPEID FROM ERS_REIMBURSEMENT_TYPE WHERE REIMB_TYPE = REIMB_TYPEIN;      INSERT INTO ERS_REIMBURSEMENT(REIMB_ID, REIMB_AMOUNT, REIMB_SUBMITTED, REIMB_DESCRIPTION, REIMB_RECEIPT, REIMB_AUTHOR, REIMB_STATUS_ID, REIMB_TYPE_ID) VALUES(ERS_REIMB_ID_SEQ.NEXTVAL, REIMB_AMOUNT, REIMB_SUBMITTED, REIMB_DESCRIPTION, REIMB_RECEIPT, REIMB_AUTHOR_ID, REIMB_STATUS_ID, REIMB_TYPEID);          COMMIT; END;     /  CREATE OR REPLACE PROCEDURE INSERT_ERS_REIMB_T_ID_NULL(REIMB_TYPE IN VARCHAR2) IS BEGIN     INSERT INTO ERS_REIMBURSEMENT_TYPE VALUES(ERS_REIMB_TYPE_ID_SEQ.NEXTVAL, REIMB_TYPE);     COMMIT; END; /  COMMIT;  CREATE OR REPLACE TRIGGER ERS_USER_ROLE_ID_NULL_TRIG BEFORE INSERT ON ERS_USER_ROLES FOR EACH ROW BEGIN         IF :NEW.ERS_USER_ROLE_ID IS NULL THEN                 SELECT ERS_USER_ROLE_ID_SEQ.NEXTVAL INTO :NEW.ERS_USER_ROLE_ID FROM DUAL;         END IF; END; /  CREATE OR REPLACE PROCEDURE INSERT_ERS_USER_ROLES_ID_NULL(USER_ROLE IN VARCHAR2) IS BEGIN     INSERT INTO ERS_USER_ROLES VALUES(ERS_USER_ROLE_ID_SEQ.NEXTVAL, USER_ROLE);     COMMIT; END; /INSERT INTO ERS_REIMBURSEMENT_TYPE (REIMB_TYPE) VALUES('Lodging'); INSERT INTO ERS_REIMBURSEMENT_TYPE (REIMB_TYPE) VALUES('Travel'); INSERT INTO ERS_REIMBURSEMENT_TYPE (REIMB_TYPE) VALUES('Food'); INSERT INTO ERS_REIMBURSEMENT_TYPE (REIMB_TYPE) VALUES('Other');INSERT INTO ERS_REIMBURSEMENT_STATUS (REIMB_STATUS) VALUES('Pending'); INSERT INTO ERS_REIMBURSEMENT_STATUS (REIMB_STATUS) VALUES('Approved'); INSERT INTO ERS_REIMBURSEMENT_STATUS (REIMB_STATUS) VALUES('Denied');INSERT INTO ERS_USER_ROLES (USER_ROLE) VALUES('Employee'); INSERT INTO ERS_USER_ROLES (USER_ROLE) VALUES('Admin');INSERT INTO ERS_USERS (ERS_USERNAME,ERS_PASSWORD,USER_FIRST_NAME,USER_LAST_NAME,USER_EMAIL,USER_ROLE_ID) VALUES('coltossoff','12345','Colt','Ossoff','coltossoff@gmail.com',301); INSERT INTO ERS_USERS (ERS_USERNAME,ERS_PASSWORD,USER_FIRST_NAME,USER_LAST_NAME,USER_EMAIL,USER_ROLE_ID) VALUES('seandoyle','12345','Sean','Doyle','SCDoyle316@gmail.com',301); INSERT INTO ERS_USERS (ERS_USERNAME,ERS_PASSWORD,USER_FIRST_NAME,USER_LAST_NAME,USER_EMAIL,USER_ROLE_ID) VALUES('phillippride','12345','Phillip','Pride','phillipjpride@gmail.com',301); INSERT INTO ERS_USERS (ERS_USERNAME,ERS_PASSWORD,USER_FIRST_NAME,USER_LAST_NAME,USER_EMAIL,USER_ROLE_ID) VALUES('kristenkavanagh','12345','Kristen','Kavanagh','Kristen.kavanagh.wright@gmail.com',301); INSERT INTO ERS_USERS (ERS_USERNAME,ERS_PASSWORD,USER_FIRST_NAME,USER_LAST_NAME,USER_EMAIL,USER_ROLE_ID) VALUES('alexandriawise','12345','Alexandria','Wise','alexandriarwise@gmail.com',301); INSERT INTO ERS_USERS (ERS_USERNAME,ERS_PASSWORD,USER_FIRST_NAME,USER_LAST_NAME,USER_EMAIL,USER_ROLE_ID) VALUES('michaeljung','12345','Michael','Jung','michael.jungrevature@gmail.com',301); INSERT INTO ERS_USERS (ERS_USERNAME,ERS_PASSWORD,USER_FIRST_NAME,USER_LAST_NAME,USER_EMAIL,USER_ROLE_ID) VALUES('bronwenhughes','12345','Bronwen','Hughes','bronwen@hughesnet.org',301); INSERT INTO ERS_USERS (ERS_USERNAME,ERS_PASSWORD,USER_FIRST_NAME,USER_LAST_NAME,USER_EMAIL,USER_ROLE_ID) VALUES('ryanwilliams','12345','Ryan','Williams','rrwilliams1600@gmail.com',301); INSERT INTO ERS_USERS (ERS_USERNAME,ERS_PASSWORD,USER_FIRST_NAME,USER_LAST_NAME,USER_EMAIL,USER_ROLE_ID) VALUES('vanessafountain','12345','Vanessa','Fountain','vanessa.s.fountain@gmail.com',301); INSERT INTO ERS_USERS (ERS_USERNAME,ERS_PASSWORD,USER_FIRST_NAME,USER_LAST_NAME,USER_EMAIL,USER_ROLE_ID) VALUES('louispipkin','12345','Louis','Pipkin','ldpipkin@gmail.com',301); INSERT INTO ERS_USERS (ERS_USERNAME,ERS_PASSWORD,USER_FIRST_NAME,USER_LAST_NAME,USER_EMAIL,USER_ROLE_ID) VALUES('joshuajibilian','12345','Joshua','Jibilian','jwjibilian@gmail.com',301); INSERT INTO ERS_USERS (ERS_USERNAME,ERS_PASSWORD,USER_FIRST_NAME,USER_LAST_NAME,USER_EMAIL,USER_ROLE_ID) VALUES('johnjosephsavath','12345','John','Savath','Johnsavath@gmail.com',301); INSERT INTO ERS_USERS (ERS_USERNAME,ERS_PASSWORD,USER_FIRST_NAME,USER_LAST_NAME,USER_EMAIL,USER_ROLE_ID) VALUES('michaelgrammens','12345','Michael','Grammens','MLGrammens@gmail.com',301); INSERT INTO ERS_USERS (ERS_USERNAME,ERS_PASSWORD,USER_FIRST_NAME,USER_LAST_NAME,USER_EMAIL,USER_ROLE_ID) VALUES('clementdikoko','12345','Clement','Dikoko','clementdikoko94@gmail.com',301); INSERT INTO ERS_USERS (ERS_USERNAME,ERS_PASSWORD,USER_FIRST_NAME,USER_LAST_NAME,USER_EMAIL,USER_ROLE_ID) VALUES('trevinchester','help','Trevin','Chester','Trevin.Chester@revature.com',302);CREATE OR REPLACE FUNCTION GET_CUSTOMER_HASH(USERNAME VARCHAR2, PWD VARCHAR2) RETURN VARCHAR2 IS EXTRA VARCHAR2(10) := 'SALT'; BEGIN   RETURN TO_CHAR(DBMS_OBFUSCATION_TOOLKIT.MD5(   INPUT => UTL_I18N.STRING_TO_RAW(DATA => USERNAME || PWD || EXTRA))); END; /  CREATE OR REPLACE TRIGGER USER_INSERT BEFORE INSERT ON ERS_USERS FOR EACH ROW BEGIN                                 IF :NEW.C_ID IS NULL THEN     SELECT CUSTOMER_SEQ.NEXTVAL INTO :NEW.C_ID FROM DUAL;   END IF;                                            SELECT GET_CUSTOMER_HASH(:NEW.C_USERNAME,:NEW.C_PASSWORD) INTO :NEW.C_PASSWORD FROM DUAL; END; /CREATE OR REPLACE FUNCTION CHECK_CRENDENTIALS(USERNAME VARCHAR2, PWD VARCHAR2) RETURN VARCHAR2 IS     HASH VARCHAR2(250); BEGIN     HASH:= GET_CUSTOMER_HASH(USERNAME, PWD);     RETURN HASH; END; /CREATE OR REPLACE PROCEDURE UPDATE_REIMB_STATUS(ID IN NUMBER, STATUS IN VARCHAR2, RESOLVER IN VARCHAR2) IS    T_REIMB_STATUS_ID NUMBER;    T_RESOLVER_ID NUMBER;    T_RESOLVED TIMESTAMP; BEGIN     SELECT ERS_USERS_ID INTO T_RESOLVER_ID FROM ERS_USERS WHERE ERS_USERNAME = RESOLVER;     SELECT REIMB_STATUS_ID INTO T_REIMB_STATUS_ID FROM ERS_REIMBURSEMENT_STATUS WHERE REIMB_STATUS = STATUS;     SELECT CURRENT_TIMESTAMP INTO T_RESOLVED FROM DUAL;          UPDATE ERS_REIMBURSEMENT SET REIMB_RESOLVED = T_RESOLVED, REIMB_RESOLVER = T_RESOLVER_ID, REIMB_STATUS_ID = T_REIMB_STATUS_ID      WHERE REIMB_ID = ID; END; / "; expected "QUEUE, NOWAIT, AS, CALL"; SQL statement:
CREATE OR REPLACE TRIGGER ERS_REIMB_ID_NULL_TRIG BEFORE INSERT ON ERS_REIMBURSEMENT FOR EACH ROW BEGIN         IF :new.REIMB_ID IS NULL THEN                 SELECT ERS_REIMB_ID_SEQ.nextval INTO :new.REIMB_ID FROM dual;         END IF;         IF :new.REIMB_STATUS_ID IS NULL THEN              SELECT 101 INTO :new.REIMB_STATUS_ID FROM dual;         END IF; END; /  CREATE OR REPLACE TRIGGER ERS_USERS_ID_NULL_TRIG BEFORE INSERT ON ERS_USERS FOR EACH ROW BEGIN         IF :new.ERS_USERS_ID IS NULL THEN                 SELECT ERS_USERS_ID_SEQ.nextval INTO :new.ERS_USERS_ID FROM dual;         END IF;                   SELECT GET_CUSTOMER_HASH(:NEW.ERS_USERNAME,:NEW.ERS_PASSWORD) INTO :NEW.ERS_PASSWORD FROM DUAL; END; /  CREATE OR REPLACE PROCEDURE INSERT_ERS_USERS_ID_NULL(ers_username IN VARCHAR2, ers_password VARCHAR2, user_first_name IN VARCHAR, user_last_name IN VARCHAR2, user_email IN VARCHAR, user_role_id IN NUMBER) IS BEGIN     INSERT INTO ERS_USERS VALUES(ERS_USERS_ID_SEQ.NEXTVAL, ers_username, ers_password, user_first_name, user_last_name, user_email, user_role_id);     COMMIT; END;     /   CREATE OR REPLACE TRIGGER ERS_REIMB_STATUS_ID_NULL_TRIG BEFORE INSERT ON ERS_REIMBURSEMENT_STATUS FOR EACH ROW BEGIN         IF :new.REIMB_STATUS_ID IS NULL THEN                 SELECT ERS_REIMB_STATUS_ID_SEQ.nextval INTO :new.REIMB_STATUS_ID FROM dual;         END IF; END; /   CREATE OR REPLACE PROCEDURE INSERT_ERS_REIMB_S_ID_NULL(reimb_status IN VARCHAR2) IS BEGIN     INSERT INTO ERS_REIMBURSEMENT_STATUS VALUES(ERS_REIMB_STATUS_ID_SEQ.NEXTVAL, reimb_status);     COMMIT; END; /   CREATE OR REPLACE TRIGGER ERS_REIMB_TYPE_ID_NULL_TRIG BEFORE INSERT ON ERS_REIMBURSEMENT_TYPE FOR EACH ROW BEGIN         IF :new.REIMB_TYPE_ID IS NULL THEN                 SELECT ERS_REIMB_TYPE_ID_SEQ.nextval INTO :new.REIMB_TYPE_ID FROM dual;         END IF; END; /   CREATE OR REPLACE PROCEDURE INSERT_ERS_REIMB_ID_NULL(reimb_amount IN NUMBER, reimb_submitted TIMESTAMP,  reimb_description IN VARCHAR, reimb_receipt IN BLOB, reimb_author IN VARCHAR2, reimb_typein IN VARCHAR2) IS     reimb_author_id NUMBER;     reimb_status_id NUMBER;     reimb_typeid NUMBER; BEGIN     SELECT ers_users_id INTO  reimb_author_id FROM ERS_USERS WHERE ERS_USERNAME = reimb_author;      SELECT reimb_type_id INTO reimb_typeid FROM ERS_REIMBURSEMENT_TYPE WHERE reimb_type = reimb_typein;      INSERT INTO ERS_REIMBURSEMENT(REIMB_ID, REIMB_AMOUNT, REIMB_SUBMITTED, REIMB_DESCRIPTION, REIMB_RECEIPT, REIMB_AUTHOR, REIMB_STATUS_ID, REIMB_TYPE_ID) VALUES(ERS_REIMB_ID_SEQ.NEXTVAL, reimb_amount, reimb_submitted, reimb_description, reimb_receipt, reimb_author_id, reimb_status_id, reimb_typeid);          COMMIT; END;     /  CREATE OR REPLACE PROCEDURE INSERT_ERS_REIMB_T_ID_NULL(reimb_type IN VARCHAR2) IS BEGIN     INSERT INTO ERS_REIMBURSEMENT_TYPE VALUES(ERS_REIMB_TYPE_ID_SEQ.NEXTVAL, reimb_type);     COMMIT; END; /  COMMIT;  CREATE OR REPLACE TRIGGER ERS_USER_ROLE_ID_NULL_TRIG BEFORE INSERT ON ERS_USER_ROLES FOR EACH ROW BEGIN         IF :new.ERS_USER_ROLE_ID IS NULL THEN                 SELECT ERS_USER_ROLE_ID_SEQ.nextval INTO :new.ERS_USER_ROLE_ID FROM dual;         END IF; END; /  CREATE OR REPLACE PROCEDURE INSERT_ERS_USER_ROLES_ID_NULL(user_role IN VARCHAR2) IS BEGIN     INSERT INTO ERS_USER_ROLES VALUES(ERS_USER_ROLE_ID_SEQ.NEXTVAL, user_role);     COMMIT; END; /INSERT INTO ERS_REIMBURSEMENT_TYPE (REIMB_TYPE) VALUES('Lodging'); INSERT INTO ERS_REIMBURSEMENT_TYPE (REIMB_TYPE) VALUES('Travel'); INSERT INTO ERS_REIMBURSEMENT_TYPE (REIMB_TYPE) VALUES('Food'); INSERT INTO ERS_REIMBURSEMENT_TYPE (REIMB_TYPE) VALUES('Other');INSERT INTO ERS_REIMBURSEMENT_STATUS (REIMB_STATUS) VALUES('Pending'); INSERT INTO ERS_REIMBURSEMENT_STATUS (REIMB_STATUS) VALUES('Approved'); INSERT INTO ERS_REIMBURSEMENT_STATUS (REIMB_STATUS) VALUES('Denied');INSERT INTO ERS_USER_ROLES (USER_ROLE) VALUES('Employee'); INSERT INTO ERS_USER_ROLES (USER_ROLE) VALUES('Admin');INSERT INTO ERS_USERS (ERS_USERNAME,ERS_PASSWORD,USER_FIRST_NAME,USER_LAST_NAME,USER_EMAIL,USER_ROLE_ID) VALUES('coltossoff','12345','Colt','Ossoff','coltossoff@gmail.com',301); INSERT INTO ERS_USERS (ERS_USERNAME,ERS_PASSWORD,USER_FIRST_NAME,USER_LAST_NAME,USER_EMAIL,USER_ROLE_ID) VALUES('seandoyle','12345','Sean','Doyle','SCDoyle316@gmail.com',301); INSERT INTO ERS_USERS (ERS_USERNAME,ERS_PASSWORD,USER_FIRST_NAME,USER_LAST_NAME,USER_EMAIL,USER_ROLE_ID) VALUES('phillippride','12345','Phillip','Pride','phillipjpride@gmail.com',301); INSERT INTO ERS_USERS (ERS_USERNAME,ERS_PASSWORD,USER_FIRST_NAME,USER_LAST_NAME,USER_EMAIL,USER_ROLE_ID) VALUES('kristenkavanagh','12345','Kristen','Kavanagh','Kristen.kavanagh.wright@gmail.com',301); INSERT INTO ERS_USERS (ERS_USERNAME,ERS_PASSWORD,USER_FIRST_NAME,USER_LAST_NAME,USER_EMAIL,USER_ROLE_ID) VALUES('alexandriawise','12345','Alexandria','Wise','alexandriarwise@gmail.com',301); INSERT INTO ERS_USERS (ERS_USERNAME,ERS_PASSWORD,USER_FIRST_NAME,USER_LAST_NAME,USER_EMAIL,USER_ROLE_ID) VALUES('michaeljung','12345','Michael','Jung','michael.jungrevature@gmail.com',301); INSERT INTO ERS_USERS (ERS_USERNAME,ERS_PASSWORD,USER_FIRST_NAME,USER_LAST_NAME,USER_EMAIL,USER_ROLE_ID) VALUES('bronwenhughes','12345','Bronwen','Hughes','bronwen@hughesnet.org',301); INSERT INTO ERS_USERS (ERS_USERNAME,ERS_PASSWORD,USER_FIRST_NAME,USER_LAST_NAME,USER_EMAIL,USER_ROLE_ID) VALUES('ryanwilliams','12345','Ryan','Williams','rrwilliams1600@gmail.com',301); INSERT INTO ERS_USERS (ERS_USERNAME,ERS_PASSWORD,USER_FIRST_NAME,USER_LAST_NAME,USER_EMAIL,USER_ROLE_ID) VALUES('vanessafountain','12345','Vanessa','Fountain','vanessa.s.fountain@gmail.com',301); INSERT INTO ERS_USERS (ERS_USERNAME,ERS_PASSWORD,USER_FIRST_NAME,USER_LAST_NAME,USER_EMAIL,USER_ROLE_ID) VALUES('louispipkin','12345','Louis','Pipkin','ldpipkin@gmail.com',301); INSERT INTO ERS_USERS (ERS_USERNAME,ERS_PASSWORD,USER_FIRST_NAME,USER_LAST_NAME,USER_EMAIL,USER_ROLE_ID) VALUES('joshuajibilian','12345','Joshua','Jibilian','jwjibilian@gmail.com',301); INSERT INTO ERS_USERS (ERS_USERNAME,ERS_PASSWORD,USER_FIRST_NAME,USER_LAST_NAME,USER_EMAIL,USER_ROLE_ID) VALUES('johnjosephsavath','12345','John','Savath','Johnsavath@gmail.com',301); INSERT INTO ERS_USERS (ERS_USERNAME,ERS_PASSWORD,USER_FIRST_NAME,USER_LAST_NAME,USER_EMAIL,USER_ROLE_ID) VALUES('michaelgrammens','12345','Michael','Grammens','MLGrammens@gmail.com',301); INSERT INTO ERS_USERS (ERS_USERNAME,ERS_PASSWORD,USER_FIRST_NAME,USER_LAST_NAME,USER_EMAIL,USER_ROLE_ID) VALUES('clementdikoko','12345','Clement','Dikoko','clementdikoko94@gmail.com',301); INSERT INTO ERS_USERS (ERS_USERNAME,ERS_PASSWORD,USER_FIRST_NAME,USER_LAST_NAME,USER_EMAIL,USER_ROLE_ID) VALUES('trevinchester','help','Trevin','Chester','Trevin.Chester@revature.com',302);CREATE OR REPLACE FUNCTION GET_CUSTOMER_HASH(USERNAME VARCHAR2, PWD VARCHAR2) RETURN VARCHAR2 IS EXTRA VARCHAR2(10) := 'SALT'; BEGIN   RETURN TO_CHAR(DBMS_OBFUSCATION_TOOLKIT.MD5(   INPUT => UTL_I18N.STRING_TO_RAW(DATA => USERNAME || PWD || EXTRA))); END; /  CREATE OR REPLACE TRIGGER USER_INSERT BEFORE INSERT ON ERS_USERS FOR EACH ROW BEGIN   /* INCREASE THE SEQUENCE */   IF :NEW.C_ID IS NULL THEN     SELECT CUSTOMER_SEQ.NEXTVAL INTO :NEW.C_ID FROM DUAL;   END IF;      /* SAVE HASH INSTEAD OF PASSWORD */   SELECT GET_CUSTOMER_HASH(:NEW.C_USERNAME,:NEW.C_PASSWORD) INTO :NEW.C_PASSWORD FROM DUAL; END; /CREATE OR REPLACE FUNCTION CHECK_CRENDENTIALS(USERNAME VARCHAR2, PWD VARCHAR2) RETURN VARCHAR2 IS     hash VARCHAR2(250); BEGIN     hash:= GET_CUSTOMER_HASH(USERNAME, PWD);     RETURN hash; END; /CREATE OR REPLACE PROCEDURE UPDATE_REIMB_STATUS(id IN NUMBER, status IN VARCHAR2, resolver IN VARCHAR2) IS    t_reimb_status_id NUMBER;    t_resolver_id NUMBER;    t_resolved TIMESTAMP; BEGIN     SELECT ers_users_id INTO t_resolver_id FROM ers_users WHERE ers_username = resolver;     SELECT reimb_status_id INTO t_reimb_status_id FROM ers_reimbursement_status WHERE reimb_status = status;     SELECT CURRENT_TIMESTAMP INTO t_resolved FROM dual;          UPDATE ers_reimbursement SET reimb_resolved = t_resolved, reimb_resolver = t_resolver_id, reimb_status_id = t_reimb_status_id      WHERE reimb_id = id; END; / [42001-197]
2018-11-25 14:03:05 jdbc[3]: exception
org.h2.jdbc.JdbcSQLException: Function "INSERT_ERS_REIMB_ID_NULL" not found; SQL statement:
  call insert_ers_reimb_id_null(?,?,?,?,?,?)   [90022-197]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:357)
	at org.h2.message.DbException.get(DbException.java:179)
	at org.h2.message.DbException.get(DbException.java:155)
	at org.h2.command.Parser.readJavaFunction(Parser.java:2699)
	at org.h2.command.Parser.readFunction(Parser.java:2756)
	at org.h2.command.Parser.readTerm(Parser.java:3102)
	at org.h2.command.Parser.readFactor(Parser.java:2587)
	at org.h2.command.Parser.readSum(Parser.java:2574)
	at org.h2.command.Parser.readConcat(Parser.java:2544)
	at org.h2.command.Parser.readCondition(Parser.java:2370)
	at org.h2.command.Parser.readAnd(Parser.java:2342)
	at org.h2.command.Parser.readExpression(Parser.java:2334)
	at org.h2.command.Parser.parseCall(Parser.java:4854)
	at org.h2.command.Parser.parsePrepared(Parser.java:382)
	at org.h2.command.Parser.parse(Parser.java:335)
	at org.h2.command.Parser.parse(Parser.java:307)
	at org.h2.command.Parser.prepareCommand(Parser.java:278)
	at org.h2.engine.Session.prepareLocal(Session.java:611)
	at org.h2.engine.Session.prepareCommand(Session.java:549)
	at org.h2.jdbc.JdbcConnection.prepareCommand(JdbcConnection.java:1247)
	at org.h2.jdbc.JdbcPreparedStatement.<init>(JdbcPreparedStatement.java:76)
	at org.h2.jdbc.JdbcCallableStatement.<init>(JdbcCallableStatement.java:50)
	at org.h2.jdbc.JdbcConnection.prepareCall(JdbcConnection.java:930)
	at com.kers.daos.ReimbursementDAOImpl.insertReimbursement(ReimbursementDAOImpl.java:45)
	at com.test.ReimbursementDaoTest.selectByNametest(ReimbursementDaoTest.java:42)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:89)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:41)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:541)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:763)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:463)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:209)
2018-11-25 14:05:07 jdbc[3]: exception
org.h2.jdbc.JdbcSQLException: Sequence "ERS_REIMB_STATUS_ID_SEQ" not found; SQL statement:
DROP SEQUENCE ERS_REIMB_STATUS_ID_SEQ;
DROP SEQUENCE ERS_REIMB_ID_SEQ;
DROP SEQUENCE ERS_REIMB_TYPE_ID_SEQ;  
DROP SEQUENCE ERS_USER_ROLE_ID_SEQ;
DROP SEQUENCE ERS_USERS_ID_SEQ; [90036-197]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:357)
	at org.h2.message.DbException.get(DbException.java:179)
	at org.h2.message.DbException.get(DbException.java:155)
	at org.h2.command.ddl.DropSequence.update(DropSequence.java:45)
	at org.h2.command.CommandContainer.update(CommandContainer.java:102)
	at org.h2.command.Command.executeUpdate(Command.java:261)
	at org.h2.command.CommandList.update(CommandList.java:42)
	at org.h2.command.CommandList.executeRemaining(CommandList.java:36)
	at org.h2.command.CommandList.update(CommandList.java:43)
	at org.h2.command.CommandList.executeRemaining(CommandList.java:36)
	at org.h2.command.CommandList.update(CommandList.java:43)
	at org.h2.command.CommandList.executeRemaining(CommandList.java:36)
	at org.h2.command.CommandList.update(CommandList.java:43)
	at org.h2.command.CommandList.executeRemaining(CommandList.java:36)
	at org.h2.command.CommandList.update(CommandList.java:43)
	at org.h2.command.CommandList.executeRemaining(CommandList.java:36)
	at org.h2.command.CommandList.update(CommandList.java:43)
	at org.h2.command.Command.executeUpdate(Command.java:261)
	at org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:233)
	at org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:205)
	at com.kers.daos.ReimbursementDAOImpl.h2DestroyDao(ReimbursementDAOImpl.java:316)
	at com.test.ReimbursementDaoTest.tearDown(ReimbursementDaoTest.java:36)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:33)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:89)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:41)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:541)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:763)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:463)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:209)
2018-11-25 14:05:39 jdbc[3]: exception
org.h2.jdbc.JdbcSQLException: Sequence "ERS_REIMB_STATUS_ID_SEQ" not found; SQL statement:
DROP SEQUENCE ERS_REIMB_STATUS_ID_SEQ;
DROP SEQUENCE ERS_REIMB_ID_SEQ;
DROP SEQUENCE ERS_REIMB_TYPE_ID_SEQ;  
DROP SEQUENCE ERS_USER_ROLE_ID_SEQ;
DROP SEQUENCE ERS_USERS_ID_SEQ; [90036-197]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:357)
	at org.h2.message.DbException.get(DbException.java:179)
	at org.h2.message.DbException.get(DbException.java:155)
	at org.h2.command.ddl.DropSequence.update(DropSequence.java:45)
	at org.h2.command.CommandContainer.update(CommandContainer.java:102)
	at org.h2.command.Command.executeUpdate(Command.java:261)
	at org.h2.command.CommandList.update(CommandList.java:42)
	at org.h2.command.CommandList.executeRemaining(CommandList.java:36)
	at org.h2.command.CommandList.update(CommandList.java:43)
	at org.h2.command.CommandList.executeRemaining(CommandList.java:36)
	at org.h2.command.CommandList.update(CommandList.java:43)
	at org.h2.command.CommandList.executeRemaining(CommandList.java:36)
	at org.h2.command.CommandList.update(CommandList.java:43)
	at org.h2.command.CommandList.executeRemaining(CommandList.java:36)
	at org.h2.command.CommandList.update(CommandList.java:43)
	at org.h2.command.CommandList.executeRemaining(CommandList.java:36)
	at org.h2.command.CommandList.update(CommandList.java:43)
	at org.h2.command.Command.executeUpdate(Command.java:261)
	at org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:233)
	at org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:205)
	at com.kers.daos.ReimbursementDAOImpl.h2DestroyDao(ReimbursementDAOImpl.java:317)
	at com.test.ReimbursementDaoTest.tearDown(ReimbursementDaoTest.java:36)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:33)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:89)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:41)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:541)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:763)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:463)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:209)
2018-11-25 14:06:33 jdbc[3]: exception
org.h2.jdbc.JdbcSQLException: Sequence "ERS_REIMB_STATUS_ID_SEQ" not found; SQL statement:
DROP SEQUENCE ERS_REIMB_STATUS_ID_SEQ;
DROP SEQUENCE ERS_REIMB_ID_SEQ;
DROP SEQUENCE ERS_REIMB_TYPE_ID_SEQ;  
DROP SEQUENCE ERS_USER_ROLE_ID_SEQ;
DROP SEQUENCE ERS_USERS_ID_SEQ; [90036-197]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:357)
	at org.h2.message.DbException.get(DbException.java:179)
	at org.h2.message.DbException.get(DbException.java:155)
	at org.h2.command.ddl.DropSequence.update(DropSequence.java:45)
	at org.h2.command.CommandContainer.update(CommandContainer.java:102)
	at org.h2.command.Command.executeUpdate(Command.java:261)
	at org.h2.command.CommandList.update(CommandList.java:42)
	at org.h2.command.CommandList.executeRemaining(CommandList.java:36)
	at org.h2.command.CommandList.update(CommandList.java:43)
	at org.h2.command.CommandList.executeRemaining(CommandList.java:36)
	at org.h2.command.CommandList.update(CommandList.java:43)
	at org.h2.command.CommandList.executeRemaining(CommandList.java:36)
	at org.h2.command.CommandList.update(CommandList.java:43)
	at org.h2.command.CommandList.executeRemaining(CommandList.java:36)
	at org.h2.command.CommandList.update(CommandList.java:43)
	at org.h2.command.CommandList.executeRemaining(CommandList.java:36)
	at org.h2.command.CommandList.update(CommandList.java:43)
	at org.h2.command.Command.executeUpdate(Command.java:261)
	at org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:233)
	at org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:205)
	at com.kers.daos.ReimbursementDAOImpl.h2DestroyDao(ReimbursementDAOImpl.java:318)
	at com.test.ReimbursementDaoTest.tearDown(ReimbursementDaoTest.java:36)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:33)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:89)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:41)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:541)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:763)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:463)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:209)
2018-11-25 14:09:46 jdbc[3]: exception
org.h2.jdbc.JdbcSQLException: Syntax error in SQL statement "CREATE OR REPLACE TRIGGER ERS_REIMB_ID_NULL_TRIG BEFORE INSERT ON ERS_REIMBURSEMENT FOR EACH ROW BEGIN[*]         IF :NEW.REIMB_ID IS NULL THEN                 SELECT ERS_REIMB_ID_SEQ.NEXTVAL INTO :NEW.REIMB_ID FROM DUAL;         END IF;         IF :NEW.REIMB_STATUS_ID IS NULL THEN              SELECT 101 INTO :NEW.REIMB_STATUS_ID FROM DUAL;         END IF; END; /   "; expected "QUEUE, NOWAIT, AS, CALL"; SQL statement:
CREATE OR REPLACE TRIGGER ERS_REIMB_ID_NULL_TRIG BEFORE INSERT ON ERS_REIMBURSEMENT FOR EACH ROW BEGIN         IF :new.REIMB_ID IS NULL THEN                 SELECT ERS_REIMB_ID_SEQ.nextval INTO :new.REIMB_ID FROM dual;         END IF;         IF :new.REIMB_STATUS_ID IS NULL THEN              SELECT 101 INTO :new.REIMB_STATUS_ID FROM dual;         END IF; END; /   [42001-197]
2018-11-25 14:11:15 jdbc[3]: exception
org.h2.jdbc.JdbcSQLException: Syntax error in SQL statement "CREATE TABLE ERS_USER_ROLES(     ERS_USER_ROLE_ID NUMBER PRIMARY KEY,     USER_ROLE VARCHAR2(10) NOT NULL );  CREATE TABLE ERS_REIMBURSEMENT_TYPE(     REIMB_TYPE_ID NUMBER PRIMARY KEY,     REIMB_TYPE VARCHAR2(10) NOT NULL );  CREATE TABLE ERS_REIMBURSEMENT_STATUS(     REIMB_STATUS_ID NUMBER PRIMARY KEY,     REIMB_STATUS VARCHAR2(10) NOT NULL );  CREATE TABLE ERS_USERS(     ERS_USERS_ID NUMBER PRIMARY KEY,     ERS_USERNAME VARCHAR2(50) UNIQUE,     ERS_PASSWORD VARCHAR2(50) NOT NULL,     USER_FIRST_NAME VARCHAR2(100) NOT NULL,     USER_LAST_NAME VARCHAR2(100) NOT NULL,     USER_EMAIL VARCHAR2(150) UNIQUE NOT NULL,     USER_ROLE_ID NUMBER NOT NULL,     FOREIGN KEY (USER_ROLE_ID) REFERENCES ERS_USER_ROLES(ERS_USER_ROLE_ID) );  CREATE TABLE ERS_REIMBURSEMENT(     REIMB_ID NUMBER PRIMARY KEY,     REIMB_AMOUNT NUMBER NOT NULL,     REIMB_SUBMITTED TIMESTAMP NOT NULL,     REIMB_RESOLVED TIMESTAMP,     REIMB_DESCRIPTION VARCHAR2(250),     REIMB_RECEIPT BLOB,     REIMB_AUTHOR NUMBER NOT NULL,     REIMB_RESOLVER NUMBER,     REIMB_STATUS_ID NUMBER NOT NULL,     REIMB_TYPE_ID NUMBER NOT NULL,      FOREIGN KEY (REIMB_AUTHOR) REFERENCES ERS_USERS(ERS_USERS_ID),      FOREIGN KEY (REIMB_RESOLVER) REFERENCES ERS_USERS(ERS_USERS_ID),      FOREIGN KEY (REIMB_STATUS_ID) REFERENCES ERS_REIMBURSEMENT_STATUS(REIMB_STATUS_ID),      FOREIGN KEY (REIMB_TYPE_ID) REFERENCES ERS_REIMBURSEMENT_TYPE(REIMB_TYPE_ID) );CREATE SEQUENCE ERS_REIMB_STATUS_ID_SEQ START WITH 101 INCREMENT BY 1;          CREATE SEQUENCE ERS_REIMB_TYPE_ID_SEQ START WITH 201 INCREMENT BY 1;  CREATE SEQUENCE ERS_USER_ROLE_ID_SEQ START WITH 301 INCREMENT BY 1;      CREATE SEQUENCE ERS_USERS_ID_SEQ START WITH 1001 INCREMENT BY 1;  CREATE SEQUENCE ERS_REIMB_ID_SEQ START WITH 2001 INCREMENT BY 1;CREATE OR REPLACE FUNCTION GET_CUSTOMER_HASH(USERNAME VARCHAR2, PWD VARCHAR2) RETURN VARCHAR2 IS EXTRA VARCHAR2(10) := 'SALT'; BEGIN   RETURN TO_CHAR(DBMS_OBFUSCATION_TOOLKIT.MD5(   INPUT => UTL_I18N.STRING_TO_RAW(DATA => USERNAME || PWD || EXTRA))); END; /  CREATE OR REPLACE TRIGGER USER_INSERT BEFORE INSERT ON ERS_USERS FOR EACH ROW BEGIN   [*]/* INCREASE THE SEQUENCE    IF :NEW.C_ID IS NULL THEN     SELECT CUSTOMER_SEQ.NEXTVAL INTO :NEW.C_ID FROM DUAL;   END IF;      /* SAVE HASH INSTEAD OF PASSWORD    SELECT GET_CUSTOMER_HASH(:NEW.C_USERNAME,:NEW.C_PASSWORD) INTO :NEW.C_PASSWORD FROM DUAL; END; /CREATE OR REPLACE FUNCTION CHECK_CRENDENTIALS(USERNAME VARCHAR2, PWD VARCHAR2) RETURN VARCHAR2 IS     hash VARCHAR2(250); BEGIN     hash:= GET_CUSTOMER_HASH(USERNAME, PWD);     RETURN hash; END; /"; SQL statement:
CREATE TABLE ERS_USER_ROLES(     ERS_USER_ROLE_ID NUMBER PRIMARY KEY,     USER_ROLE VARCHAR2(10) NOT NULL );  CREATE TABLE ERS_REIMBURSEMENT_TYPE(     REIMB_TYPE_ID NUMBER PRIMARY KEY,     REIMB_TYPE VARCHAR2(10) NOT NULL );  CREATE TABLE ERS_REIMBURSEMENT_STATUS(     REIMB_STATUS_ID NUMBER PRIMARY KEY,     REIMB_STATUS VARCHAR2(10) NOT NULL );  CREATE TABLE ERS_USERS(     ERS_USERS_ID NUMBER PRIMARY KEY,     ERS_USERNAME VARCHAR2(50) UNIQUE,     ERS_PASSWORD VARCHAR2(50) NOT NULL,     USER_FIRST_NAME VARCHAR2(100) NOT NULL,     USER_LAST_NAME VARCHAR2(100) NOT NULL,     USER_EMAIL VARCHAR2(150) UNIQUE NOT NULL,     USER_ROLE_ID NUMBER NOT NULL,     FOREIGN KEY (USER_ROLE_ID) REFERENCES ERS_USER_ROLES(ERS_USER_ROLE_ID) );  CREATE TABLE ERS_REIMBURSEMENT(     REIMB_ID NUMBER PRIMARY KEY,     REIMB_AMOUNT NUMBER NOT NULL,     REIMB_SUBMITTED TIMESTAMP NOT NULL,     REIMB_RESOLVED TIMESTAMP,     REIMB_DESCRIPTION VARCHAR2(250),     REIMB_RECEIPT BLOB,     REIMB_AUTHOR NUMBER NOT NULL,     REIMB_RESOLVER NUMBER,     REIMB_STATUS_ID NUMBER NOT NULL,     REIMB_TYPE_ID NUMBER NOT NULL,      FOREIGN KEY (REIMB_AUTHOR) REFERENCES ERS_USERS(ERS_USERS_ID),      FOREIGN KEY (REIMB_RESOLVER) REFERENCES ERS_USERS(ERS_USERS_ID),      FOREIGN KEY (REIMB_STATUS_ID) REFERENCES ERS_REIMBURSEMENT_STATUS(REIMB_STATUS_ID),      FOREIGN KEY (REIMB_TYPE_ID) REFERENCES ERS_REIMBURSEMENT_TYPE(REIMB_TYPE_ID) );CREATE SEQUENCE ERS_REIMB_STATUS_ID_SEQ START WITH 101 INCREMENT BY 1;          CREATE SEQUENCE ERS_REIMB_TYPE_ID_SEQ START WITH 201 INCREMENT BY 1;  CREATE SEQUENCE ERS_USER_ROLE_ID_SEQ START WITH 301 INCREMENT BY 1;      CREATE SEQUENCE ERS_USERS_ID_SEQ START WITH 1001 INCREMENT BY 1;  CREATE SEQUENCE ERS_REIMB_ID_SEQ START WITH 2001 INCREMENT BY 1;CREATE OR REPLACE FUNCTION GET_CUSTOMER_HASH(USERNAME VARCHAR2, PWD VARCHAR2) RETURN VARCHAR2 IS EXTRA VARCHAR2(10) := 'SALT'; BEGIN   RETURN TO_CHAR(DBMS_OBFUSCATION_TOOLKIT.MD5(   INPUT => UTL_I18N.STRING_TO_RAW(DATA => USERNAME || PWD || EXTRA))); END; /  CREATE OR REPLACE TRIGGER USER_INSERT BEFORE INSERT ON ERS_USERS FOR EACH ROW BEGIN   /* INCREASE THE SEQUENCE    IF :NEW.C_ID IS NULL THEN     SELECT CUSTOMER_SEQ.NEXTVAL INTO :NEW.C_ID FROM DUAL;   END IF;      /* SAVE HASH INSTEAD OF PASSWORD    SELECT GET_CUSTOMER_HASH(:NEW.C_USERNAME,:NEW.C_PASSWORD) INTO :NEW.C_PASSWORD FROM DUAL; END; /CREATE OR REPLACE FUNCTION CHECK_CRENDENTIALS(USERNAME VARCHAR2, PWD VARCHAR2) RETURN VARCHAR2 IS     hash VARCHAR2(250); BEGIN     hash:= GET_CUSTOMER_HASH(USERNAME, PWD);     RETURN hash; END; / [42000-197]
2018-11-25 14:11:15 jdbc[3]: exception
org.h2.jdbc.JdbcSQLException: Table "ERS_REIMBURSEMENT" not found; SQL statement:
DROP TABLE ERS_REIMBURSEMENT;
DROP TABLE ERS_USERS;
DROP TABLE ERS_USER_ROLES;
DROP TABLE ERS_REIMBURSEMENT_TYPE;
DROP TABLE ERS_REIMBURSEMENT_STATUS;DROP SEQUENCE ERS_REIMB_STATUS_ID_SEQ;
DROP SEQUENCE ERS_REIMB_ID_SEQ;
DROP SEQUENCE ERS_REIMB_TYPE_ID_SEQ;  
DROP SEQUENCE ERS_USER_ROLE_ID_SEQ;
DROP SEQUENCE ERS_USERS_ID_SEQ; [42102-197]
2018-11-25 14:17:49 jdbc[3]: exception
org.h2.jdbc.JdbcSQLException: Sequence "ERS_REIMB_STATUS_ID_SEQ" not found; SQL statement:
DROP SEQUENCE ERS_REIMB_STATUS_ID_SEQ;
DROP SEQUENCE ERS_REIMB_ID_SEQ;
DROP SEQUENCE ERS_REIMB_TYPE_ID_SEQ;  
DROP SEQUENCE ERS_USER_ROLE_ID_SEQ;
DROP SEQUENCE ERS_USERS_ID_SEQ; [90036-197]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:357)
	at org.h2.message.DbException.get(DbException.java:179)
	at org.h2.message.DbException.get(DbException.java:155)
	at org.h2.command.ddl.DropSequence.update(DropSequence.java:45)
	at org.h2.command.CommandContainer.update(CommandContainer.java:102)
	at org.h2.command.Command.executeUpdate(Command.java:261)
	at org.h2.command.CommandList.update(CommandList.java:42)
	at org.h2.command.CommandList.executeRemaining(CommandList.java:36)
	at org.h2.command.CommandList.update(CommandList.java:43)
	at org.h2.command.CommandList.executeRemaining(CommandList.java:36)
	at org.h2.command.CommandList.update(CommandList.java:43)
	at org.h2.command.CommandList.executeRemaining(CommandList.java:36)
	at org.h2.command.CommandList.update(CommandList.java:43)
	at org.h2.command.CommandList.executeRemaining(CommandList.java:36)
	at org.h2.command.CommandList.update(CommandList.java:43)
	at org.h2.command.CommandList.executeRemaining(CommandList.java:36)
	at org.h2.command.CommandList.update(CommandList.java:43)
	at org.h2.command.Command.executeUpdate(Command.java:261)
	at org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:233)
	at org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:205)
	at com.kers.daos.ReimbursementDAOImpl.h2DestroyDao(ReimbursementDAOImpl.java:202)
	at com.test.ReimbursementDaoTest.tearDown(ReimbursementDaoTest.java:36)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:33)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:89)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:41)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:541)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:763)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:463)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:209)
2018-11-25 14:22:11 jdbc[3]: exception
org.h2.jdbc.JdbcSQLException: Syntax error in SQL statement "CREATE OR REPLACE TRIGGER ERS_REIMB_ID_NULL_TRIG
BEFORE INSERT ON ERS_REIMBURSEMENT
FOR EACH ROW
BEGIN[*]
        IF :NEW.REIMB_ID IS NULL THEN
                SELECT ERS_REIMB_ID_SEQ.NEXTVAL INTO :NEW.REIMB_ID FROM DUAL;
        END IF;
        IF :NEW.REIMB_STATUS_ID IS NULL THEN
             SELECT 101 INTO :NEW.REIMB_STATUS_ID FROM DUAL;
        END IF;
END;
/

CREATE OR REPLACE TRIGGER ERS_USERS_ID_NULL_TRIG
BEFORE INSERT ON ERS_USERS
FOR EACH ROW
BEGIN
        IF :NEW.ERS_USERS_ID IS NULL THEN
                SELECT ERS_USERS_ID_SEQ.NEXTVAL INTO :NEW.ERS_USERS_ID FROM DUAL;
        END IF;
        
         SELECT GET_CUSTOMER_HASH(:NEW.ERS_USERNAME,:NEW.ERS_PASSWORD) INTO :NEW.ERS_PASSWORD FROM DUAL;
END;
/
CREATE OR REPLACE TRIGGER ERS_REIMB_STATUS_ID_NULL_TRIG
BEFORE INSERT ON ERS_REIMBURSEMENT_STATUS
FOR EACH ROW
BEGIN
        IF :NEW.REIMB_STATUS_ID IS NULL THEN
                SELECT ERS_REIMB_STATUS_ID_SEQ.NEXTVAL INTO :NEW.REIMB_STATUS_ID FROM DUAL;
        END IF;
END;
/

CREATE OR REPLACE TRIGGER ERS_REIMB_TYPE_ID_NULL_TRIG
BEFORE INSERT ON ERS_REIMBURSEMENT_TYPE
FOR EACH ROW
BEGIN
        IF :NEW.REIMB_TYPE_ID IS NULL THEN
                SELECT ERS_REIMB_TYPE_ID_SEQ.NEXTVAL INTO :NEW.REIMB_TYPE_ID FROM DUAL;
        END IF;
END;
/

CREATE OR REPLACE TRIGGER ERS_USER_ROLE_ID_NULL_TRIG
BEFORE INSERT ON ERS_USER_ROLES
FOR EACH ROW
BEGIN
        IF :NEW.ERS_USER_ROLE_ID IS NULL THEN
                SELECT ERS_USER_ROLE_ID_SEQ.NEXTVAL INTO :NEW.ERS_USER_ROLE_ID FROM DUAL;
        END IF;
END;
/ "; expected "QUEUE, NOWAIT, AS, CALL"; SQL statement:
CREATE OR REPLACE TRIGGER ERS_REIMB_ID_NULL_TRIG
BEFORE INSERT ON ERS_REIMBURSEMENT
FOR EACH ROW
BEGIN
        IF :new.REIMB_ID IS NULL THEN
                SELECT ERS_REIMB_ID_SEQ.nextval INTO :new.REIMB_ID FROM dual;
        END IF;
        IF :new.REIMB_STATUS_ID IS NULL THEN
             SELECT 101 INTO :new.REIMB_STATUS_ID FROM dual;
        END IF;
END;
/

CREATE OR REPLACE TRIGGER ERS_USERS_ID_NULL_TRIG
BEFORE INSERT ON ERS_USERS
FOR EACH ROW
BEGIN
        IF :new.ERS_USERS_ID IS NULL THEN
                SELECT ERS_USERS_ID_SEQ.nextval INTO :new.ERS_USERS_ID FROM dual;
        END IF;
        
         SELECT GET_CUSTOMER_HASH(:NEW.ERS_USERNAME,:NEW.ERS_PASSWORD) INTO :NEW.ERS_PASSWORD FROM DUAL;
END;
/
CREATE OR REPLACE TRIGGER ERS_REIMB_STATUS_ID_NULL_TRIG
BEFORE INSERT ON ERS_REIMBURSEMENT_STATUS
FOR EACH ROW
BEGIN
        IF :new.REIMB_STATUS_ID IS NULL THEN
                SELECT ERS_REIMB_STATUS_ID_SEQ.nextval INTO :new.REIMB_STATUS_ID FROM dual;
        END IF;
END;
/

CREATE OR REPLACE TRIGGER ERS_REIMB_TYPE_ID_NULL_TRIG
BEFORE INSERT ON ERS_REIMBURSEMENT_TYPE
FOR EACH ROW
BEGIN
        IF :new.REIMB_TYPE_ID IS NULL THEN
                SELECT ERS_REIMB_TYPE_ID_SEQ.nextval INTO :new.REIMB_TYPE_ID FROM dual;
        END IF;
END;
/

CREATE OR REPLACE TRIGGER ERS_USER_ROLE_ID_NULL_TRIG
BEFORE INSERT ON ERS_USER_ROLES
FOR EACH ROW
BEGIN
        IF :new.ERS_USER_ROLE_ID IS NULL THEN
                SELECT ERS_USER_ROLE_ID_SEQ.nextval INTO :new.ERS_USER_ROLE_ID FROM dual;
        END IF;
END;
/ [42001-197]
2018-11-25 14:29:21 jdbc[3]: exception
org.h2.jdbc.JdbcSQLException: Syntax error in SQL statement "CREATE OR REPLACE TRIGGER ERS_REIMB_ID_NULL_TRIG
BEFORE INSERT ON ERS_REIMBURSEMENT
FOR EACH ROW
BEGIN[*]
        IF :NEW.REIMB_ID IS NULL THEN
                SELECT ERS_REIMB_ID_SEQ.NEXTVAL INTO :NEW.REIMB_ID FROM DUAL;
        END IF;
        IF :NEW.REIMB_STATUS_ID IS NULL THEN
             SELECT 101 INTO :NEW.REIMB_STATUS_ID FROM DUAL;
        END IF;
END;
/

CREATE OR REPLACE TRIGGER ERS_USERS_ID_NULL_TRIG
BEFORE INSERT ON ERS_USERS
FOR EACH ROW
BEGIN
        IF :NEW.ERS_USERS_ID IS NULL THEN
                SELECT ERS_USERS_ID_SEQ.NEXTVAL INTO :NEW.ERS_USERS_ID FROM DUAL;
        END IF;
        
         SELECT GET_CUSTOMER_HASH(:NEW.ERS_USERNAME,:NEW.ERS_PASSWORD) INTO :NEW.ERS_PASSWORD FROM DUAL;
END;
/
CREATE OR REPLACE TRIGGER ERS_REIMB_STATUS_ID_NULL_TRIG
BEFORE INSERT ON ERS_REIMBURSEMENT_STATUS
FOR EACH ROW
BEGIN
        IF :NEW.REIMB_STATUS_ID IS NULL THEN
                SELECT ERS_REIMB_STATUS_ID_SEQ.NEXTVAL INTO :NEW.REIMB_STATUS_ID FROM DUAL;
        END IF;
END;
/

CREATE OR REPLACE TRIGGER ERS_REIMB_TYPE_ID_NULL_TRIG
BEFORE INSERT ON ERS_REIMBURSEMENT_TYPE
FOR EACH ROW
BEGIN
        IF :NEW.REIMB_TYPE_ID IS NULL THEN
                SELECT ERS_REIMB_TYPE_ID_SEQ.NEXTVAL INTO :NEW.REIMB_TYPE_ID FROM DUAL;
        END IF;
END;
/

CREATE OR REPLACE TRIGGER ERS_USER_ROLE_ID_NULL_TRIG
BEFORE INSERT ON ERS_USER_ROLES
FOR EACH ROW
BEGIN
        IF :NEW.ERS_USER_ROLE_ID IS NULL THEN
                SELECT ERS_USER_ROLE_ID_SEQ.NEXTVAL INTO :NEW.ERS_USER_ROLE_ID FROM DUAL;
        END IF;
END;
/ "; expected "QUEUE, NOWAIT, AS, CALL"; SQL statement:
CREATE OR REPLACE TRIGGER ERS_REIMB_ID_NULL_TRIG
BEFORE INSERT ON ERS_REIMBURSEMENT
FOR EACH ROW
BEGIN
        IF :new.REIMB_ID IS NULL THEN
                SELECT ERS_REIMB_ID_SEQ.nextval INTO :new.REIMB_ID FROM dual;
        END IF;
        IF :new.REIMB_STATUS_ID IS NULL THEN
             SELECT 101 INTO :new.REIMB_STATUS_ID FROM dual;
        END IF;
END;
/

CREATE OR REPLACE TRIGGER ERS_USERS_ID_NULL_TRIG
BEFORE INSERT ON ERS_USERS
FOR EACH ROW
BEGIN
        IF :new.ERS_USERS_ID IS NULL THEN
                SELECT ERS_USERS_ID_SEQ.nextval INTO :new.ERS_USERS_ID FROM dual;
        END IF;
        
         SELECT GET_CUSTOMER_HASH(:NEW.ERS_USERNAME,:NEW.ERS_PASSWORD) INTO :NEW.ERS_PASSWORD FROM DUAL;
END;
/
CREATE OR REPLACE TRIGGER ERS_REIMB_STATUS_ID_NULL_TRIG
BEFORE INSERT ON ERS_REIMBURSEMENT_STATUS
FOR EACH ROW
BEGIN
        IF :new.REIMB_STATUS_ID IS NULL THEN
                SELECT ERS_REIMB_STATUS_ID_SEQ.nextval INTO :new.REIMB_STATUS_ID FROM dual;
        END IF;
END;
/

CREATE OR REPLACE TRIGGER ERS_REIMB_TYPE_ID_NULL_TRIG
BEFORE INSERT ON ERS_REIMBURSEMENT_TYPE
FOR EACH ROW
BEGIN
        IF :new.REIMB_TYPE_ID IS NULL THEN
                SELECT ERS_REIMB_TYPE_ID_SEQ.nextval INTO :new.REIMB_TYPE_ID FROM dual;
        END IF;
END;
/

CREATE OR REPLACE TRIGGER ERS_USER_ROLE_ID_NULL_TRIG
BEFORE INSERT ON ERS_USER_ROLES
FOR EACH ROW
BEGIN
        IF :new.ERS_USER_ROLE_ID IS NULL THEN
                SELECT ERS_USER_ROLE_ID_SEQ.nextval INTO :new.ERS_USER_ROLE_ID FROM dual;
        END IF;
END;
/ [42001-197]
