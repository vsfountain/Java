CREATE USER revERS
IDENTIFIED BY p4ssw0rd
DEFAULT TABLESPACE users
TEMPORARY TABLESPACE temp
QUOTA 10M ON users;

GRANT connect to revERS;
GRANT resource to revERS;
GRANT create session TO revERS;
GRANT create table TO revERS;
GRANT create view TO revERS;



conn revERS/p4ssw0rd

--ALTER SYSTEM SET ENCRYPTION KEY IDENTIFIED BY "p4ssw0rd";
--ALTER SYSTEM SET ENCRYPTION WALLET OPEN IDENTIFIED BY "p4ssw0rd";

CREATE TABLE ERS_REIMBURSEMENT_STATUS
(
    REIMB_STATUS_ID NUMBER NOT NULL,
    REIMB_STATUS VARCHAR2(10),
    CONSTRAINT REIMB_STATUS_PK PRIMARY KEY (REIMB_STATUS_ID)
);

CREATE TABLE ERS_REIMBURSEMENT_TYPE
(
    REIMB_TYPE_ID NUMBER NOT NULL,
    REIMB_TYPE VARCHAR2(10),
    CONSTRAINT REIMB_TYPE_PK PRIMARY KEY (REIMB_TYPE_ID)
);

CREATE TABLE ERS_USER_ROLES
(
    ERS_USER_ROLE_ID NUMBER NOT NULL,
    USER_ROLE VARCHAR2(10),
    CONSTRAINT ERS_USER_ROLES_PK PRIMARY KEY (ERS_USER_ROLE_ID)
);

CREATE TABLE ERS_USERS
(
    ERS_USERS_ID NUMBER NOT NULL,
    ERS_USERNAME VARCHAR2(50) UNIQUE NOT NULL,
    ERS_PASSWORD VARCHAR2(50) NOT NULL,
    USER_FIRST_NAME VARCHAR2(100) NOT NULL,
    USER_LAST_NAME VARCHAR2(100) NOT NULL,
    USER_EMAIL VARCHAR2(100) UNIQUE NOT NULL,
    USER_ROLE_ID NUMBER NOT NULL,
    CONSTRAINT ERS_USERS_PK PRIMARY KEY (ERS_USERS_ID),
    CONSTRAINT USER_ROLES_FK FOREIGN KEY (USER_ROLE_ID) REFERENCES ERS_USER_ROLES(ERS_USER_ROLE_ID)
);

CREATE TABLE ERS_REIMBURSEMENT
(
    REIMB_ID NUMBER NOT NULL,
    REIMB_AMOUNT NUMBER NOT NULL,
    REIMB_SUBMITTED TIMESTAMP NOT NULL,
    REIMB_RESOLVED TIMESTAMP,
    REIMB_DESCRIPTION VARCHAR2(250),
    REIMB_RECEIPT BLOB,
    REIMB_AUTHOR NUMBER NOT NULL,
    REIMB_RESOLVER NUMBER,
    REIMB_STATUS_ID NUMBER NOT NULL,
    REIMB_TYPE_ID NUMBER NOT NULL,
    CONSTRAINT ERS_REIMBURSEMENT_PK PRIMARY KEY (REIMB_ID),
    CONSTRAINT ERS_USERS_FK_AUTH FOREIGN KEY (REIMB_AUTHOR) REFERENCES ERS_USERS(ERS_USERS_ID),
    CONSTRAINT ERS_USERS_FK_RESLVR FOREIGN KEY (REIMB_RESOLVER) REFERENCES ERS_USERS(ERS_USERS_ID),
    CONSTRAINT ERS_REIMBURSEMENT_STATUS_FK FOREIGN KEY (REIMB_STATUS_ID) REFERENCES ERS_REIMBURSEMENT_STATUS(REIMB_STATUS_ID),
    CONSTRAINT ERS_REIMBURSEMENT_TYPE_FK FOREIGN KEY (REIMB_TYPE_ID) REFERENCES ERS_REIMBURSEMENT_TYPE(REIMB_TYPE_ID)
);

DROP SEQUENCE SEQ_STATUS;
DROP SEQUENCE SEQ_REIMBURSEMENT;
DROP SEQUENCE SEQ_USERS;
DROP SEQUENCE SEQ_ROLES;
DROP SEQUENCE SEQ_TYPE;

CREATE SEQUENCE SEQ_STATUS
    START WITH 1
    INCREMENT BY 1;

CREATE SEQUENCE SEQ_REIMBURSEMENT
    START WITH 1
    INCREMENT BY 1;

CREATE SEQUENCE SEQ_USERS
    START WITH 1
    INCREMENT BY 1;

CREATE SEQUENCE SEQ_ROLES
    START WITH 1
    INCREMENT BY 1;

CREATE SEQUENCE SEQ_TYPE
    START WITH 1
    INCREMENT BY 1;

DROP TRIGGER TRIG_STATUS;
DROP TRIGGER TRIG_REIMB;
DROP TRIGGER TRIG_USERS;
DROP TRIGGER TRIG_ROLES;
DROP TRIGGER TRIG_TYPE;

CREATE OR REPLACE TRIGGER trig_status
BEFORE INSERT ON ERS_REIMBURSEMENT_STATUS
FOR EACH ROW
BEGIN
    IF :new.REIMB_STATUS_ID IS NULL then
        SELECT SEQ_STATUS.nextval INTO :new.REIMB_STATUS_ID FROM dual;
    END IF;
END;
/
CREATE OR REPLACE TRIGGER trig_reimb
BEFORE INSERT ON ERS_REIMBURSEMENT
FOR EACH ROW
BEGIN
    IF :new.REIMB_ID IS NULL then
        SELECT SEQ_REIMBURSEMENT.nextval INTO :new.REIMB_ID FROM dual;
    END IF;
    SELECT ers_reimbursement_status.reimb_status_id INTO :NEW.reimb_status_id FROM ers_reimbursement_status WHERE ers_reimbursement_status.reimb_status = 'Pending';
    :NEW.reimb_submitted := SYSTIMESTAMP;
END;
/
CREATE OR REPLACE TRIGGER trig_users
BEFORE INSERT ON ERS_USERS
FOR EACH ROW
BEGIN
    IF :new.ERS_USERS_ID IS NULL then
        SELECT SEQ_USERS.nextval INTO :new.ERS_USERS_ID FROM dual;
    END IF;
END;
/
CREATE OR REPLACE TRIGGER trig_roles
BEFORE INSERT ON ERS_USER_ROLES
FOR EACH ROW
BEGIN
    IF :new.ERS_USER_ROLE_ID IS NULL then
        SELECT SEQ_ROLES.nextval INTO :new.ERS_USER_ROLE_ID FROM dual;
    END IF;
END;
/
CREATE OR REPLACE TRIGGER trig_type
BEFORE INSERT ON ERS_REIMBURSEMENT_TYPE
FOR EACH ROW
BEGIN
    IF :new.REIMB_TYPE_ID IS NULL then
        SELECT SEQ_TYPE.nextval INTO :new.REIMB_TYPE_ID FROM dual;
    END IF;
END;
/

-- Password hashing from Trevin
-- He will be blamed for all errors

CREATE OR REPLACE FUNCTION GET_CUSTOMER_HASH(USERNAME VARCHAR2, PASSWORD VARCHAR2) RETURN VARCHAR2
IS
EXTRA VARCHAR2(10) := 'SALT';
BEGIN
  RETURN TO_CHAR(DBMS_OBFUSCATION_TOOLKIT.MD5(
  INPUT => UTL_I18N.STRING_TO_RAW(DATA => USERNAME || PASSWORD || EXTRA)));
END;
/

CREATE OR REPLACE TRIGGER CUSTOMER_B_INSERT
BEFORE INSERT
ON ERS_USERS
FOR EACH ROW
BEGIN
  /* INCREASE THE SEQUENCE */
  --IF :NEW.C_ID IS NULL THEN
  --  SELECT CUSTOMER_SEQ.NEXTVAL INTO :NEW.C_ID FROM DUAL;
  --END IF;
  
  /* SAVE HASH INSTEAD OF PASSWORD */
  SELECT GET_CUSTOMER_HASH(:NEW.ERS_USERNAME,:NEW.ERS_PASSWORD) INTO :NEW.ERS_PASSWORD FROM DUAL;
END;
/

-- Table inserts

ROLLBACK; -- Use in case of emergency


INSERT INTO ERS_REIMBURSEMENT_TYPE (REIMB_TYPE) VALUES('LODGING');
INSERT INTO ERS_REIMBURSEMENT_TYPE (REIMB_TYPE) VALUES('TRAVEL');
INSERT INTO ERS_REIMBURSEMENT_TYPE (REIMB_TYPE) VALUES('FOOD');
INSERT INTO ERS_REIMBURSEMENT_TYPE (REIMB_TYPE) VALUES('OTHER');
SELECT * FROM ERS_REIMBURSEMENT_TYPE;

INSERT INTO ERS_REIMBURSEMENT_STATUS (REIMB_STATUS) VALUES('Pending');
INSERT INTO ERS_REIMBURSEMENT_STATUS (REIMB_STATUS) VALUES('Approved');
INSERT INTO ERS_REIMBURSEMENT_STATUS (REIMB_STATUS) VALUES('Denied');
select * from ers_reimbursement_status;

INSERT INTO ERS_USER_ROLES (USER_ROLE) VALUES('Employee');
INSERT INTO ERS_USER_ROLES (USER_ROLE) VALUES('Admin');
select * from ers_user_roles;

INSERT INTO ERS_USERS (ERS_USERNAME,ERS_PASSWORD,USER_FIRST_NAME,USER_LAST_NAME,USER_EMAIL,USER_ROLE_ID) VALUES('coltossoff','12345','Colt','Ossoff','coltossoff@gmail.com',1);
INSERT INTO ERS_USERS (ERS_USERNAME,ERS_PASSWORD,USER_FIRST_NAME,USER_LAST_NAME,USER_EMAIL,USER_ROLE_ID) VALUES('seandoyle','12345','Sean','Doyle','SCDoyle316@gmail.com',1);
INSERT INTO ERS_USERS (ERS_USERNAME,ERS_PASSWORD,USER_FIRST_NAME,USER_LAST_NAME,USER_EMAIL,USER_ROLE_ID) VALUES('phillippride','12345','Phillip','Pride','phillipjpride@gmail.com',1);
INSERT INTO ERS_USERS (ERS_USERNAME,ERS_PASSWORD,USER_FIRST_NAME,USER_LAST_NAME,USER_EMAIL,USER_ROLE_ID) VALUES('kristenkavanagh','12345','Kristen','Kavanagh','Kristen.kavanagh.wright@gmail.com',1);
INSERT INTO ERS_USERS (ERS_USERNAME,ERS_PASSWORD,USER_FIRST_NAME,USER_LAST_NAME,USER_EMAIL,USER_ROLE_ID) VALUES('alexandriawise','12345','Alexandria','Wise','alexandriarwise@gmail.com',1);
INSERT INTO ERS_USERS (ERS_USERNAME,ERS_PASSWORD,USER_FIRST_NAME,USER_LAST_NAME,USER_EMAIL,USER_ROLE_ID) VALUES('michaeljung','12345','Michael','Jung','michael.jungrevature@gmail.com',1);
INSERT INTO ERS_USERS (ERS_USERNAME,ERS_PASSWORD,USER_FIRST_NAME,USER_LAST_NAME,USER_EMAIL,USER_ROLE_ID) VALUES('bronwenhughes','12345','Bronwen','Hughes','bronwen@hughesnet.org',1);
INSERT INTO ERS_USERS (ERS_USERNAME,ERS_PASSWORD,USER_FIRST_NAME,USER_LAST_NAME,USER_EMAIL,USER_ROLE_ID) VALUES('ryanwilliams','12345','Ryan','Williams','rrwilliams1600@gmail.com',1);
INSERT INTO ERS_USERS (ERS_USERNAME,ERS_PASSWORD,USER_FIRST_NAME,USER_LAST_NAME,USER_EMAIL,USER_ROLE_ID) VALUES('vanessafountain','12345','Vanessa','Fountain','vanessa.s.fountain@gmail.com',1);
INSERT INTO ERS_USERS (ERS_USERNAME,ERS_PASSWORD,USER_FIRST_NAME,USER_LAST_NAME,USER_EMAIL,USER_ROLE_ID) VALUES('louispipkin','12345','Louis','Pipkin','ldpipkin@gmail.com',1);
INSERT INTO ERS_USERS (ERS_USERNAME,ERS_PASSWORD,USER_FIRST_NAME,USER_LAST_NAME,USER_EMAIL,USER_ROLE_ID) VALUES('joshuajibilian','12345','Joshua','Jibilian','jwjibilian@gmail.com',1);
INSERT INTO ERS_USERS (ERS_USERNAME,ERS_PASSWORD,USER_FIRST_NAME,USER_LAST_NAME,USER_EMAIL,USER_ROLE_ID) VALUES('johnjosephsavath','12345','John','Savath','Johnsavath@gmail.com',1);
INSERT INTO ERS_USERS (ERS_USERNAME,ERS_PASSWORD,USER_FIRST_NAME,USER_LAST_NAME,USER_EMAIL,USER_ROLE_ID) VALUES('michaelgrammens','12345','Michael','Grammens','MLGrammens@gmail.com',1);
INSERT INTO ERS_USERS (ERS_USERNAME,ERS_PASSWORD,USER_FIRST_NAME,USER_LAST_NAME,USER_EMAIL,USER_ROLE_ID) VALUES('clementdikoko','12345','Clement','Dikoko','clementdikoko94@gmail.com',1);
INSERT INTO ERS_USERS (ERS_USERNAME,ERS_PASSWORD,USER_FIRST_NAME,USER_LAST_NAME,USER_EMAIL,USER_ROLE_ID) VALUES('trevinchester','help','Trevin','Chester','Trevin.Chester@revature.com',2);
select * from ers_users;

commit;


select * from ers_user_roles;

SELECT * from ers_users;

SELECT u.ers_users_id, u.ers_username, u.USER_FIRST_NAME, u.USER_LAST_NAME, u.user_email, r.user_role 
FROM ers_users u LEFT OUTER JOIN ers_user_roles r ON u.USER_ROLE_ID = r.ers_user_role_id 
WHERE u.ers_username = 'coltossoff' AND u.ers_password = GET_CUSTOMER_HASH('coltossoff','12345');

SELECT u.ers_users_id, u.ers_username, u.USER_FIRST_NAME, u.USER_LAST_NAME, u.user_email, r.user_role 
FROM ers_users u LEFT OUTER JOIN ers_user_roles r ON u.USER_ROLE_ID = r.ers_user_role_id 
WHERE u.ers_users_id = 15;

DROP PROCEDURE insert_reimb;

CREATE OR REPLACE PROCEDURE insert_reimb ( amt IN NUMBER, descr IN VARCHAR2, auth IN NUMBER, tp IN VARCHAR2 )
IS
    type_id NUMBER;
BEGIN
    SELECT REIMB_TYPE_ID INTO type_id FROM ers_reimbursement_type WHERE REIMB_TYPE = tp;
    INSERT INTO ers_reimbursement (REIMB_AMOUNT, REIMB_DESCRIPTION, REIMB_AUTHOR, REIMB_TYPE_ID) VALUES (amt, descr, auth, type_id);
    commit;
END;
/

DECLARE
BEGIN
    INSERT_REIMB(120.00, 'This covers the office party''s catering', 1, 'FOOD');
END;
/
SELECT * FROM ers_reimbursement;


SELECT r.reimb_id, r.reimb_amount, r.reimb_submitted, r.reimb_resolved, r.reimb_description, r.reimb_receipt, u.ers_username, res.ers_username, s.reimb_status, t.reimb_type
FROM ERS_REIMBURSEMENT r 
LEFT OUTER JOIN ERS_USERS U ON r.reimb_author = u.ers_users_id
LEFT OUTER JOIN ERS_USERS res ON r.reimb_resolver = res.ers_users_id
LEFT OUTER JOIN ers_reimbursement_status s ON r.reimb_status_id = s.reimb_status_id
LEFT OUTER JOIN ers_reimbursement_type t ON r.reimb_type_id = t.reimb_type_id;

SELECT r.reimb_id, r.reimb_amount, r.reimb_submitted, r.reimb_resolved, r.reimb_description, r.reimb_receipt, u.ers_username, res.ers_username, s.reimb_status, t.reimb_type
FROM ERS_REIMBURSEMENT r 
LEFT OUTER JOIN ERS_USERS U ON r.reimb_author = u.ers_users_id
LEFT OUTER JOIN ERS_USERS res ON r.reimb_resolver = res.ers_users_id
LEFT OUTER JOIN ers_reimbursement_status s ON r.reimb_status_id = s.reimb_status_id
LEFT OUTER JOIN ers_reimbursement_type t ON r.reimb_type_id = t.reimb_type_id
WHERE u.ers_users_id = 1;

DROP PROCEDURE update_reimb;

CREATE OR REPLACE PROCEDURE update_reimb ( rid IN NUMBER, uid IN NUMBER, status IN VARCHAR2 )
is
    stid NUMBER;
BEGIN
    SELECT reimb_status_id INTO stid FROM ers_reimbursement_status WHERE reimb_status = status;
    UPDATE ers_reimbursement SET reimb_resolver = uid, reimb_status_id = stid WHERE reimb_id = rid;
END;
/

CREATE OR REPLACE TRIGGER TRIG_UPDATE_REIMB
BEFORE UPDATE ON ERS_REIMBURSEMENT
FOR EACH ROW
BEGIN
    :NEW.reimb_resolved := SYSTIMESTAMP;
END;
/

DECLARE
BEGIN
    update_reimb (1,15,'Approved');
END;
/
