package testing;

import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.CoreMatchers.not;
import static org.junit.Assert.*;

import java.io.IOException;
import java.io.PrintWriter;
import java.io.StringWriter;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.junit.Before;
import org.junit.Test;
import org.mockito.Mock;
import org.mockito.Mockito;



import ServiceLayer.VaultServiceImplementation;
import Servlets.MasterServlet;

public class Testing extends Mockito{
	
//	@Test
//	public void getUsername() {
//		System.out.print("Currently testing username set");
//		VaultServiceImplementation tester = new VaultServiceImplementation();
//		String username = "vsfount";
//		String password = "password";
//		//assertNull(null, tester.getUserInfo());
//		//assertNotNull("Should return from the Database",tester.getUserInfo());
//		//assertThat(tester.getUserInfo(), is(notNullValue()));
//		assertThat("No UserID is 0", tester.getUserInfo(username, password), is(not(0)));
//		assertThat("Should be 1",tester.getUserInfo(username, password), is(1));
//		
//	}
	
	 @Test
	    public void testServlet() throws Exception {
	        HttpServletRequest request = mock(HttpServletRequest.class);       
	        HttpServletResponse response = mock(HttpServletResponse.class);    

	        when(request.getParameter("username")).thenReturn("me");
	        when(request.getParameter("password")).thenReturn("secret");

	        StringWriter stringWriter = new StringWriter();
	        PrintWriter writer = new PrintWriter(stringWriter);
	        when(response.getWriter()).thenReturn(writer);

	        new MasterServlet().doPost(request, response);

	        //verify(request, atLeast(1)).getParameter("username"); // only if you want to verify username was called...
	        writer.flush(); // it may not have been flushed yet...
	        //assertTrue(stringWriter.toString().contains("My expected string"));
	    }

}
