package testing;

import static org.hamcrest.CoreMatchers.containsString;
import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.CoreMatchers.not;
import static org.junit.Assert.assertThat;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

import java.io.IOException;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.util.HashMap;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.junit.Before;
import org.junit.Test;
import org.mockito.Mockito;
import org.mockito.invocation.InvocationOnMock;
import org.mockito.stubbing.Answer;

import ServiceLayer.VaultServiceImplementation;
import Servlets.MasterServlet;

public class Testing{
	HttpServletRequest request = mock(HttpServletRequest.class);       
    HttpServletResponse response = mock(HttpServletResponse.class);
    MasterServlet testServ = mock(MasterServlet.class);
	private StringWriter response_writer;
	private Map<String, String> parameters;
	
	@Test
	public void getUsername() {
		System.out.print("Currently testing username set");
		VaultServiceImplementation tester = new VaultServiceImplementation();
		String username = "vsfount";
		String password = "password";
		assertThat("No UserID is 0", tester.getUserInfo(username, password), is(not(0)));
		assertThat("Should be 1",tester.getUserInfo(username, password), is(1));
	}
	
	@Before
	public void setUp() throws IOException {
        
		parameters = new HashMap<String, String>();
		response_writer = new StringWriter();

		when(request.getParameter(toString())).thenAnswer(new Answer<String>() {
			public String answer(InvocationOnMock invocation) {
				return parameters.get((String) invocation.getArguments()[0]);
			}
		});
		when(response.getWriter()).thenReturn(new PrintWriter(response_writer));
	}
	
	@Test
    public void testServlet() throws Exception {
		
        Mockito.when(request.getParameter("username")).thenReturn("SOME");
        Mockito.when(request.getParameter("password")).thenReturn("THING");
        
        //CANNOT MOCK PRIMITIVE TYPES
        //ANY METHOD CALLED FROM doPost OR doGet of type "void" CANNOT BE MOCKED
        //StringWriter stringWriter = new StringWriter();
        //PrintWriter writer = new PrintWriter(stringWriter);
        
        testServ.doGet(request, response);
        testServ.doPost(request, response);
        
        Mockito.verify(request);
        //Mockito.verify(response);
    }

	@Test
	public void testPost1() throws Exception {
		parameters.put("param1", "some value");
		testServ.doPost(request, response);
		assertThat(response_writer.toString(),
			// a non-hamcrest core matcher
			containsString("i'm only looking for this in the bloody long response"));
	}

}
