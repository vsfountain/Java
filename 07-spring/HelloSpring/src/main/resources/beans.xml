<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

	<!-- SETTER INJECTION      also a scope attribute demo-->
	<!-- <bean name="CartoonDaoBean" class="com.example.dao.CartoonDaoImpl" />
	<bean name="CartoonServ" scope="singleton" class="com.example.service.CartoonServiceImpl">
		<property name="cartDao" ref="CartoonDaoBean"/> 
		<property name="otherProperty" ref="otherProperty"/>
	</bean> -->

	<!-- CONSTRUCTOR INJECTION -->
	<!-- <bean name="CartoonDaoBean" class="com.example.dao.CartoonDaoImpl" />
	<bean name="CartoonServ" class="com.example.service.CartoonServiceImpl">
		<constructor-arg index="0" ref="CartoonDaoBean"/>
		<constructor-arg index="1" type="int" value="5"/>
	</bean> -->
	
	<!-- AUTOWIRING -->
	<!-- "no" autowiring means spring will not autowire. this is also the default
	"byType" means spring will autowire by looking at the class' property datatypes and
		matching that to beans in the IoC container. It uses setters to inject the beans.
	"constructor" works similar to byType, except it uses a constructor with the most
		distinct dependencies, it then matches the types to beans in the IoC container
	"byName" looks at the class' property variable names and finds beans in the container
		with the same names. It uses setters to inject the beans. -->
	<!-- <bean name="cartDao" class="com.example.dao.CartoonDaoImpl" />
	<bean name="CartoonServ" class="com.example.service.CartoonServiceImpl" autowire="constructor"/>
 -->

	<!-- AUTOWIRED ANNOTATION -->
	<!-- <bean name="cartDao" class="com.example.dao.CartoonDaoImpl" />
	<bean name="CartoonServ" class="com.example.service.CartoonServiceImpl"/> -->
	
	<!-- this is how to turn on annotations in spring -->
	<context:annotation-config />
	<context:component-scan base-package="com.example.dao"/>
	<context:component-scan base-package="com.example.service"/>


</beans>
